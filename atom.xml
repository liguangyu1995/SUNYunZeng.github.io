<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孙云增的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunyunzeng.com/"/>
  <updated>2020-03-13T14:33:03.620Z</updated>
  <id>http://sunyunzeng.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>背包问题</title>
    <link href="http://sunyunzeng.com/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://sunyunzeng.com/背包问题/</id>
    <published>2020-03-13T10:39:29.000Z</published>
    <updated>2020-03-13T14:33:03.620Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 22:37:55 GMT+0800 (GMT+08:00) --><h1 id="01-背包"><a class="markdownIt-Anchor" href="#01-背包"></a> 01 背包</h1><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p><p>第 i 件物品的体积是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，价值是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p><p><strong>输入格式</strong><br>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p><p>接下来有 N 行，每行两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i,w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，用空格隔开，分别表示第 i 件物品的体积和价值。</p><p><strong>输出格式</strong><br>输出一个整数，表示最大价值。</p><p><strong>数据范围</strong><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>N</mi><mo separator="true">,</mo><mi>V</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">0&lt; N,V ≤ 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">0&lt; v_i,w_i ≤ 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8304100000000001em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><p><strong>输入样例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="思路方法"><a class="markdownIt-Anchor" href="#思路方法"></a> 思路+方法</h2><p><code>f[i][j]</code>表示面对第 i 件物品时，体积为 j 的背包的最大总价值。<br>两种选择：1. 不放入第 i 件物品。 2. 放入第 i 件物品。</p><p>状态转移方程：<strong><code>f[i][j]=max(f[i−1][j],f[i−1][j−w[i]]+v[i])</code></strong></p><p>优化：<strong><code>f[j]=max(f[j],f[j−w[i]]+v[i])</code></strong>。此时 j 要从大到小遍历，保证第 i 件物品只能选择一次。否则 <code>f[i][j]</code> 会由 <code>f[i][j−w[i]]+v[i]</code>决定，与题意不符，而顺序遍历却是完全背包的解决方案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = reader.nextInt();</span><br><span class="line">        <span class="keyword">int</span> V = reader.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] v = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            v[i] = reader.nextInt();</span><br><span class="line">            w[i] = reader.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[V+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=V; j&gt;=v[i]; j--)&#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j-v[i]]+w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度 O(VN)</p><h1 id="完全背包"><a class="markdownIt-Anchor" href="#完全背包"></a> 完全背包</h1><p>完全背包题目与01背包大体相似，只不过每件物品可以无限选择。</p><h2 id="思路-代码"><a class="markdownIt-Anchor" href="#思路-代码"></a> 思路 + 代码</h2><p>状态转移方程：<strong><code>f[i][j]=max(f[i−1][j],f[i−1][j−w[i]]+v[i])</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = in.nextInt();</span><br><span class="line">        <span class="keyword">int</span> V = in.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">int</span>[] v = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            v[i] = in.nextInt();</span><br><span class="line">            w[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[V+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=v[i]; j&lt;=V; j++)&#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j-v[i]]+w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度 O(VN)</p><h1 id="多重背包"><a class="markdownIt-Anchor" href="#多重背包"></a> 多重背包</h1><p>多重背包是每个物品指定了数量。</p><p>有 N 种物品和一个容量是 V 的背包。</p><p>第 i 种物品最多有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 件，每件体积是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，价值是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>。</p><p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p><p><strong>输入格式</strong><br>第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。</p><p>接下来有 N 行，每行三个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i,w_i,s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，用空格隔开，分别表示第 i 种物品的体积、价值和数量。</p><p><strong>输出格式</strong><br>输出一个整数，表示最大价值。</p><p><strong>数据范围</strong><br>0&lt;N,V≤100<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>i</mi></msub><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">0&lt;v_i,w_i,s_i≤100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8304100000000001em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><p><strong>输入样例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h1 id="思路-代码-2"><a class="markdownIt-Anchor" href="#思路-代码-2"></a> 思路 + 代码</h1><p>将多重背包转化为 01背包问题，即将有限量的物品划分为互相独立的部分，每个独立的部分物品可以看作01背包问题，继续采用01背包的思想解决。</p><p>状态转移方程：<strong><code>f[i][j]=max(f[i−1][j],f[i−1][j−k*w[i]]+k*v[i])</code></strong>。</p><p>将第 i 种物品转化为 <code>p[i]</code>件物品，每件物品的系数分别为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">，</mi><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><msup><mn>2</mn><mi>k</mi></msup><mo>+</mo><mn>1</mn><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">1，2, 4, ..., 2^{k-1}, p[i]-2^k+1 &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8491079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.932438em;vertical-align:-.08333em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.849108em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>, k是满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><msup><mn>2</mn><mi>k</mi></msup><mo>+</mo><mn>1</mn><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p[i]-2^k+1 &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.932438em;vertical-align:-.08333em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.849108em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span> 的最大整数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> V = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] v = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">int</span>[] s = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            v[i] = sc.nextInt();</span><br><span class="line">            w[i] = sc.nextInt();</span><br><span class="line">            s[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line">        <span class="keyword">int</span>[]dp = <span class="keyword">new</span> <span class="keyword">int</span>[V+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = Math.min(s[i], V/v[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; num&gt;<span class="number">0</span>; k &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k&gt;num) k = num;</span><br><span class="line">                num -= k;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=V; j&gt;=k*v[i]; j--)&#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j], dp[j-k*v[i]]+k*w[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度 O(V<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">\sum{log(p(i))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span>)</p><h1 id="混合背包"><a class="markdownIt-Anchor" href="#混合背包"></a> 混合背包</h1><p>混合背包其实是 01背包、多重背包和完全背包的混合体。</p><p>有 N 种物品和一个容量是 V 的背包。</p><p>物品一共有三类：</p><p>第一类物品只能用1次（01背包）；<br>第二类物品可以用无限次（完全背包）；<br>第三类物品最多只能用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 次（多重背包）；<br>每种体积是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，价值是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>。</p><p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p><p><strong>输入格式</strong><br>第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。</p><p>接下来有 N 行，每行三个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i,w_i,s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，用空格隔开，分别表示第 i 种物品的体积、价值和数量。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>=−1 表示第 i 种物品只能用1次；<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>=0 表示第 i 种物品可以用无限次；<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>&gt;0 表示第 i 种物品可以使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 次；</p><p><strong>输出格式</strong><br>输出一个整数，表示最大价值。</p><p><strong>数据范围</strong><br>$ 0&lt;N,V≤1000 <span class="katex"><span class="katex-mathml"><math><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span> 0&lt;v_i,w_i≤1000 <span class="katex"><span class="katex-mathml"><math><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span> −1≤s_i≤1000 $</p><p><strong>输入样例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> -<span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">0</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="思路-代码-3"><a class="markdownIt-Anchor" href="#思路-代码-3"></a> 思路 + 代码</h2><p>加入if-else判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// p[i]:每个物品的件数，0代表无穷个</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">if</span> (p[i] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = w[i]; j &lt;= V; j++)</span><br><span class="line">            f[j] = max(f[j], f[j - w[i]] + v[i]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= p[i]; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= w[i]; j--)</span><br><span class="line">            f[j] = max(f[j], f[j - w[i]] + v[i]);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> V = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] v = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">int</span>[] s = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            v[i] = sc.nextInt();</span><br><span class="line">            w[i] = sc.nextInt();</span><br><span class="line">            s[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">         sc.close();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[V+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=V; j&gt;=v[i]; j--)&#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j], dp[j-v[i]]+w[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=v[i]; j&lt;=V; j++)&#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j], dp[j-v[i]]+w[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> num = Math.min(s[i], V/v[i]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; num&gt;<span class="number">0</span>; k &lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(k&gt;num) k=num;</span><br><span class="line">                    num -= k;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=V; j&gt;=k*v[i]; j--)&#123;</span><br><span class="line">                        dp[j] = Math.max(dp[j], dp[j-k*v[i]]+k*w[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二维背包"><a class="markdownIt-Anchor" href="#二维背包"></a> 二维背包</h1><p>物品的约束条件除了体积外，增加了重量一维，其余跟01背包一样。</p><p>有 N 件物品和一个容量是 V 的背包，背包能承受的最大重量是 M。</p><p>每件物品只能用一次。体积是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，重量是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>m</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">m_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，价值是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>。</p><p>求解将哪些物品装入背包，可使物品总体积不超过背包容量，总重量不超过背包可承受的最大重量，且价值总和最大。<br>输出最大价值。</p><p><strong>输入格式</strong><br>第一行两个整数，N，V,M，用空格隔开，分别表示物品件数、背包容积和背包可承受的最大重量。</p><p>接下来有 N 行，每行三个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>m</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i,m_i,w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，用空格隔开，分别表示第 i 件物品的体积、重量和价值。</p><p><strong>输出格式</strong><br>输出一个整数，表示最大价值。</p><p><strong>数据范围</strong><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>N</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">0&lt;N≤1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8193em;vertical-align:-.13597em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>V</mi><mo separator="true">,</mo><mi>M</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">0&lt;V,M≤100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>m</mi><mi>i</mi></msub><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">0&lt;v_i,m_i≤100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8304100000000001em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>w</mi><mi>i</mi></msub><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">0&lt;w_i≤1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.7859700000000001em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><p><strong>输入样例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="思路-代码-4"><a class="markdownIt-Anchor" href="#思路-代码-4"></a> 思路 + 代码</h2><p>跟01背包类似，只不过两个状态。</p><p>状态转移方程：<strong><code>f[j][k]=max(f[j][k],f[j−w[i]][k-m[i]]+k*v[i])</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> V = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> M = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] v = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">int</span>[] m = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            v[i] = sc.nextInt();</span><br><span class="line">            m[i] = sc.nextInt();</span><br><span class="line">            w[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[V+<span class="number">1</span>][M+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=V; j&gt;=v[i]; j--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=M; k&gt;=m[i]; k--)&#123;</span><br><span class="line">                    dp[j][k] = Math.max(dp[j][k], dp[j-v[i]][k-m[i]]+w[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[V][M]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分组背包"><a class="markdownIt-Anchor" href="#分组背包"></a> 分组背包</h1><p>在01背包的基础上，对不同物品进行了分组，每组只能选取一件物品。</p><p>有 N 组物品和一个容量是 V 的背包。</p><p>每组物品有若干个，同一组内的物品最多只能选一个。<br>每件物品的体积是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mi>j</mi></mrow><annotation encoding="application/x-tex">v_ij</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span>，价值是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mi>j</mi></mrow><annotation encoding="application/x-tex">w_ij</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span>，其中 i 是组号，j 是组内编号。</p><p>求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p><p>输出最大价值。</p><p><strong>输入格式</strong><br>第一行有两个整数 N，V，用空格隔开，分别表示物品组数和背包容量。</p><p>接下来有 N 组数据：</p><p>每组数据第一行有一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.05764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，表示第 i 个物品组的物品数量；<br>每组数据接下来有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.05764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 行，每行有两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mi>j</mi><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub><mi>j</mi></mrow><annotation encoding="application/x-tex">v_ij,w_ij</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05724em">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span>，用空格隔开，分别表示第 i 个物品组的第 j 个物品的体积和价值；</p><p><strong>输出格式</strong><br>输出一个整数，表示最大价值。</p><p><strong>数据范围</strong><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>N</mi><mo separator="true">,</mo><mi>V</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">0&lt;N,V≤100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>S</mi><mi>i</mi></msub><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">0&lt;S_i≤100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.05764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>v</mi><mi>i</mi></msub><mi>j</mi><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub><mi>j</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">0&lt;v_ij,w_ij≤100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68354em;vertical-align:-.0391em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05724em">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.02691em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05724em">j</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><p><strong>输入样例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="思路-代码-5"><a class="markdownIt-Anchor" href="#思路-代码-5"></a> 思路 + 代码</h2><p>状态转移方程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">for</span> i <span class="title">in</span> <span class="params">(每一种分组)</span>:</span></span><br><span class="line"><span class="function">    <span class="keyword">for</span> j in <span class="title">range</span><span class="params">(V,<span class="number">0</span>,<span class="number">-1</span>)</span>:</span></span><br><span class="line"><span class="function">        <span class="keyword">for</span> k in 分组[i]:</span></span><br><span class="line"><span class="function">            dp[j] </span>= max(dp[j], dp[j-分组[i][<span class="number">0</span>]]+分组[i][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> K = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> V = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Integer, ArrayList&lt;<span class="keyword">int</span>[]&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s = sc.nextInt();</span><br><span class="line">            N += s;</span><br><span class="line">            ArrayList&lt;<span class="keyword">int</span>[]&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;s;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">                tmp[<span class="number">0</span>] = sc.nextInt();</span><br><span class="line">                tmp[<span class="number">1</span>] = sc.nextInt();</span><br><span class="line">                arr.add(tmp);</span><br><span class="line">                map.put(i, arr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[V+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; i++)&#123;</span><br><span class="line">            ArrayList&lt;<span class="keyword">int</span>[]&gt; arr = map.get(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=V; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;arr.size();k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=arr.get(k)[<span class="number">0</span>])</span><br><span class="line">                        dp[j] = Math.max(dp[j], dp[j-arr.get(k)[<span class="number">0</span>]]+arr.get(k)[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 22:37:55 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;01-背包&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#01-背包&quot;&gt;&lt;/a&gt; 01 背包&lt;/h1&gt;&lt;p
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://sunyunzeng.com/categories/Algorithm/"/>
    
    
      <category term="Dynamic Programming" scheme="http://sunyunzeng.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>CSS 布局知识</title>
    <link href="http://sunyunzeng.com/CSS-%E5%B8%83%E5%B1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://sunyunzeng.com/CSS-布局知识/</id>
    <published>2020-02-22T03:30:51.000Z</published>
    <updated>2020-02-29T07:36:31.373Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:50 GMT+0800 (GMT+08:00) --><h1 id="CSS实现垂直水平居中"><a href="#CSS实现垂直水平居中" class="headerlink" title="CSS实现垂直水平居中"></a>CSS实现垂直水平居中</h1><p>对于父元素 parent 与 子元素 child，如何实现子元素在父元素内部的水平垂直居中？</p><p>元素的 html 代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .parent&#123;</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            height: 500px;</span></span><br><span class="line"><span class="undefined">            background-color: aquamarine;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .child&#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: coral;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .parent&#123;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        height: 500px;</span></span><br><span class="line"><span class="undefined">        background-color: aquamarine;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .child&#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        background-color: coral;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="行内元素居中"><a href="#行内元素居中" class="headerlink" title="行内元素居中"></a>行内元素居中</h2><p><strong>text-algin</strong> 与 <strong>vertical-algin</strong> 只对行内元素起作用，可以实现行内元素的的垂直于水平居中，此时可以利用 <strong>display: inline-block</strong> 使子元素具有行内元素的属性，实现子元素垂直水平居中 (需设置 line-height 使垂直居中有对齐的基准)。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.parent</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">        <span class="attribute">vertical-algin</span>: middle;</span><br><span class="line">        <span class="attribute">text-algin</span>: center;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.child</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: coral;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="绝对定位-元素自身移动"><a href="#绝对定位-元素自身移动" class="headerlink" title="绝对定位 + 元素自身移动"></a>绝对定位 + 元素自身移动</h2><p>通过 left: 50% 以及 top: 50% 只使得子元素的左上角位于父元素的中心，此时需要通过 <strong>transform: translate(-50%, -50%)</strong> 移动子元素。translate(x,y) 括号的百分比数据，会以本身的长宽做参考，比如，本身的长为100px，高为100px. 那填(50%,50%)就是向右，向下移动50px，添加负号就是向着相反的方向移动50%</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.parent</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.child</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: coral;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.parent</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.child</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: coral;</span><br><span class="line">        <span class="attribute">margin</span>: -<span class="number">100px</span> -<span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="利用-margin"><a href="#利用-margin" class="headerlink" title="利用 margin"></a>利用 margin</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.parent</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.child</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: coral;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS实现三栏布局"><a href="#CSS实现三栏布局" class="headerlink" title="CSS实现三栏布局"></a>CSS实现三栏布局</h1><p>所谓的三栏布局，既是指左右两栏固定宽度，中间一栏宽度自适应的布局方式。下面列出五种实现三栏布局的方式，分别是绝对定位、float方式、flex布局、圣杯布局、双飞翼布局。</p><center><img src="/CSS-布局知识/three.jpg"></center><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p>利用绝对定位将左右两栏确定位置，中间一栏通过 margin 属性调整位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span>, <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            left: 0;</span></span><br><span class="line"><span class="undefined">            top: 0;</span></span><br><span class="line"><span class="undefined">            background-color: coral;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            margin: 0 200px 0 200px;</span></span><br><span class="line"><span class="undefined">            background-color: blueviolet;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            right: 0;</span></span><br><span class="line"><span class="undefined">            top: 0;</span></span><br><span class="line"><span class="undefined">            background-color: crimson;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="float布局"><a href="#float布局" class="headerlink" title="float布局"></a>float布局</h2><p>float定位实现三栏布局的思想是：利用float将左右两栏固定位置，并利用margin控制中间一栏的边距，从而使其宽度自适应。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span>, <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            background-color: coral;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            float: right;</span></span><br><span class="line"><span class="undefined">            background-color: crimson;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            margin: 0 200px 0 200px;</span></span><br><span class="line"><span class="undefined">            background-color: blueviolet;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>flex布局实现三栏布局的思想是：利用flex:0 0 200px固定左右两栏的位置，同时确保其不随浏览器的高度和宽度而放大缩小。 flex参数参照:<a href="https://www.w3cschool.cn/cssref/css3-pr-flex.html" target="_blank" rel="noopener">https://www.w3cschool.cn/cssref/css3-pr-flex.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span>, <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="undefined">            display: flex;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            flex: 0 0 200px;</span></span><br><span class="line"><span class="undefined">            background-color: coral;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            flex: 0 0 200px;</span></span><br><span class="line"><span class="undefined">            background-color: crimson;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            background-color: blueviolet;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>圣杯布局的原理是通过左、中、右列同向浮动，中间列宽度设置为100%实现宽度自适应，左右两列宽度宽度固定并通过位置控制实现分列左右两端。该布局可以实现中间布局的优先渲染，因为DOM结构上 middle 元素位于 left 和 right 元素的上层。</p><p><strong>1. 首先父级元素设置内边距</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 各自设置浮动方式及页面宽度</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 左栏控制位置</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 右栏控制位置</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 设置左右两栏的最小宽度</strong></p><p>最小宽度并不是 200px + 200px = 400px，因为 left 元素采用了相对定位，其在 middle 元素上方还占有 200px 位置，所以页面的 min-width 参数为 400px + 200px = 600px。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>全部代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span>, <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            min-width: 600px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="undefined">            padding-left: 200px;</span></span><br><span class="line"><span class="undefined">            padding-right: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            margin-left: -100%;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            left: -200px;</span></span><br><span class="line"><span class="undefined">            background-color: coral;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            margin-right: -200px;</span></span><br><span class="line"><span class="undefined">            background-color: crimson;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            background-color: blueviolet;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>双飞翼布局与圣杯布局的区别是：双飞翼布局的 parent 元素只包裹 middle 元素，left 元素与 right 元素通过控制与 parent的相对位置关系实现三栏布局。</p><p><strong>1. 首先用 parent 仅包裹 middle 元素</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 所有元素设置宽度与浮动</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 设置左栏位置</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin-left</span>: <span class="selector-tag">-100</span>%;</span><br></pre></td></tr></table></figure><p><strong>4. 设置右栏位置</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin-right</span>: <span class="selector-tag">-200px</span>;</span><br></pre></td></tr></table></figure><p><strong>5. 完整代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span>, <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            min-width: 600px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            background-color: blueviolet;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            margin-left: -100%;</span></span><br><span class="line"><span class="undefined">            background-color: coral;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            margin-left: -200px;</span></span><br><span class="line"><span class="undefined">            background-color: crimson;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span>&#123;</span></span><br><span class="line"><span class="undefined">            padding-left: 200px;</span></span><br><span class="line"><span class="undefined">            padding-right: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:50 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;CSS实现垂直水平居中&quot;&gt;&lt;a href=&quot;#CSS实现垂直水平居中&quot; class=&quot;headerlink&quot; title=&quot;CSS实现
      
    
    </summary>
    
      <category term="CSS" scheme="http://sunyunzeng.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://sunyunzeng.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 知识要点</title>
    <link href="http://sunyunzeng.com/CSS-%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/"/>
    <id>http://sunyunzeng.com/CSS-知识要点/</id>
    <published>2020-02-18T04:21:10.000Z</published>
    <updated>2020-02-29T08:30:42.198Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:50 GMT+0800 (GMT+08:00) --><h1 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h1><ol><li>基本元素选择</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 把段落文本设置成红色，12像素大，粗体 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">font-weight</span>:bold;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>上下文选择</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选择祖先元素为 article 标签的所有段落 p 后代 */</span></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">font-weight</span>:bold;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>特殊上下文选择</li></ol><p><strong>子选择符</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 将 section 的 h2 子元素的字体设置为 italic */</span></span><br><span class="line"><span class="selector-tag">section</span> &gt; <span class="selector-tag">h2</span> &#123;<span class="attribute">font-style</span>:italic;&#125;</span><br></pre></td></tr></table></figure><p><strong>紧邻同胞选择</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 将紧邻着 h2 的元素同胞 p 选择设置 */</span></span><br><span class="line"><span class="selector-tag">h2</span> + <span class="selector-tag">p</span> &#123;<span class="attribute">font-style</span>:italic;&#125;</span><br></pre></td></tr></table></figure><p><strong>一般同胞选择</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 将 h2 与 p 之间的同胞全部选择 */</span></span><br><span class="line"><span class="selector-tag">h2</span> ~ <span class="selector-tag">p</span> &#123;<span class="attribute">font-style</span>:italic;&#125;</span><br></pre></td></tr></table></figure><p><strong>通用选择</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 全文所有字体颜色（包括文本框）设置为黑色 */</span></span><br><span class="line">* &#123;<span class="attribute">color</span>: black&#125;</span><br><span class="line"><span class="comment">/* 只把 p 元素中所有元素文本设置为红色 */</span></span><br><span class="line"><span class="selector-tag">p</span> *&#123;<span class="attribute">color</span>: red&#125;</span><br></pre></td></tr></table></figure><p><strong>类选择</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 把属于 specialtext 类的元素设置字体类型 */</span></span><br><span class="line"><span class="selector-class">.specialtext</span> &#123;<span class="attribute">font-style</span>:italic;&#125;</span><br></pre></td></tr></table></figure><p><strong>标签带类选择</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 把 p元素中属于 specialtext 类的元素设置字体类型 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.specialtext</span> &#123;<span class="attribute">font-style</span>:italic;&#125;</span><br></pre></td></tr></table></figure><p><strong>ID选择</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*把 ID 为 mainmenu 元素中的 a 元素的字体颜色修改*/</span></span><br><span class="line"><span class="selector-id">#mainmenu</span> <span class="selector-tag">a</span> &#123;<span class="attribute">color</span>:orange;&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**属性名选择**</span><br><span class="line"></span><br><span class="line">```<span class="selector-tag">css</span></span><br><span class="line"><span class="comment">/*将带有 title 属性的 HTML img 元素显示 2 像素宽的蓝色边框*/</span></span><br><span class="line">img[title] &#123;&#123;border:2px solid blue;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>伪类选择</strong></p><p>伪类就是当 HTML 元素在某种状态时触发显示相应的 CSS 样式，伪类的用法是 元素名:状态 {属性名: 值}</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:black;&#125;</span><br></pre></td></tr></table></figure><p>主要的伪类状态有以下几种：</p><table><thead><tr><th align="center">状态名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">link</td><td align="center">链接初始状态</td></tr><tr><td align="center">visited</td><td align="center">链接被点击过状态</td></tr><tr><td align="center">hover</td><td align="center">鼠标悬浮上去状态</td></tr><tr><td align="center">active</td><td align="center">鼠标正在被点击的状态</td></tr><tr><td align="center">focus</td><td align="center">表单获取焦点时状态</td></tr><tr><td align="center">target</td><td align="center">对于设置为目标的元素被选择时的状态</td></tr><tr><td align="center">first-child</td><td align="center">一组同胞元素的第一个元素</td></tr><tr><td align="center">last-child</td><td align="center">一组同胞元素中最后一个元素</td></tr><tr><td align="center">nth-child</td><td align="center">一组同胞元素中第 n 个元素</td></tr></tbody></table><p><strong>伪元素选择</strong></p><p>两个冒号后面加伪元素状态，常用的有 ::first-letter (首字母状态)、::first-line (首行状态)、::before与::after (特定元素前后添加特殊内容)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"age"</span>&gt;</span>25<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.age</span><span class="selector-pseudo">::before</span> &#123;<span class="attribute">content</span>:<span class="string">"Age: "</span>;&#125; </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.age</span><span class="selector-pseudo">::after</span> &#123;<span class="attribute">content</span>:<span class="string">" years."</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 显示如下：Age: 25 years.*/</span></span><br></pre></td></tr></table></figure><h1 id="CSS样式叠加顺序"><a href="#CSS样式叠加顺序" class="headerlink" title="CSS样式叠加顺序"></a>CSS样式叠加顺序</h1><p>CSS 样式叠加遵循以下四个规则：</p><p><strong>1. 首先找到各元素所有的 CSS 声明。</strong></p><p><strong>2. 按照以下顺序层叠显示，越靠后的 CSS 定义方式显示级别越高。</strong></p><ul><li><p>浏览器默认样式</p></li><li><p>用户自定义样式</p></li><li><p>链接样式 （<code>&lt;link href=&quot;style.css&quot; rel=stylesheet type=&quot;text/css&quot; /&gt;</code>）</p></li><li><p>嵌入样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其他 head 元素（如 meta、title）放在这里 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span> &#123;<span class="attribute">font-size</span>:<span class="number">16px</span>;&#125; </span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>行内样式</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: 12px; font-weight:bold; font-style:italic; color:red;"</span>&gt;</span></span><br><span class="line">By adding inline CSS styling to this paragraph, you override the default styles.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 css 里面的权重定义是 <strong>!important</strong>，则不考虑 CSS样式的优先级规则，优先使用。</p><p><strong>3. 按照特指度确定显示优先级</strong></p><p>特指度指的是说明元素信息的详细程度，例如 元素 p 的特指度就要低于某一 css 类的特指度。</p><p>计算规则：I-C-E</p><p>I-C-E 表示 ID、Class、Element三个维度的得分三位数，初始为 0-0-0。</p><p>如果样式里指明一个 ID，I 代表的数字 +1。</p><p>如果样式里指明一个 类 class，C 代表的数字 +1。</p><p>如果样式里指明一个 元素 Element，E代表的数字 +1。</p><p>例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p                              0-0-1 特指度=1 </span><br><span class="line">p.largetext                    0-1-1 特指度=11 </span><br><span class="line">p#largetext                    1-0-1 特指度=101</span><br><span class="line">body p#largetext               1-0-2 特指度=102</span><br><span class="line">body p#largetext ul.mylist     1-1-3 特指度=113        </span><br><span class="line">body p#largetext ul.mylist li  1-1-4 特指度=114</span><br></pre></td></tr></table></figure><p><strong>4. 特指度相同的情况下按照叠加顺序</strong></p><h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p>令人困惑的盒子属性。</p><p>每个元素就是一个盒子，其有对应的形状，对应的属性有三组：<strong>边框（border）、内边距（padding）及外边距 （margin）。</strong></p><center></center><p><strong>1. 垂直方向的外边距取最大值。</strong></p><p>如果有两个段落 p，其CSS样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">height</span>:<span class="number">50px</span>; <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>; <span class="attribute">backgroundcolor</span>:<span class="number">#fff</span>; <span class="attribute">margin-top</span>:<span class="number">50px</span>; <span class="attribute">margin-bottom</span>:<span class="number">30px</span>;&#125;</span><br></pre></td></tr></table></figure><p>那么它们之间的距离为 <strong>50px，</strong>而不是 50px + 30px= 80px。</p><p><strong>2. 水平方向外边距叠加。</strong></p><p><strong>3. 盒子的大小视 width 属性而定。</strong></p><ul><li>在 width 没有指定情况下，元素的宽度与父元素一致。</li></ul><p>此时设置盒子的 <strong>border</strong> 及 <strong>padding</strong> 会向内拓展，不改变盒子大小。</p><p>设置 <strong>margin</strong> 会使元素宽度相对父元素的宽度减去两倍的外边距。</p><ul><li>在指定了 width 宽度大小情况下，元素宽度会拓展。</li></ul><p>此时设置盒子的 <strong>border</strong> 及 <strong>padding</strong> 会向外拓展，使盒子变大。</p><ul><li>添加 <strong>box-sizing:border-box</strong> 属性，使盒子在指定宽度 width 同时，也能像未指定一样工作。</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:50 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;选择元素&quot;&gt;&lt;a href=&quot;#选择元素&quot; class=&quot;headerlink&quot; title=&quot;选择元素&quot;&gt;&lt;/a&gt;选择元素&lt;/h1&gt;
      
    
    </summary>
    
      <category term="CSS" scheme="http://sunyunzeng.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://sunyunzeng.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>自己实现简单版Vue--3. 实现数据的双向绑定和Proxy代理</title>
    <link href="http://sunyunzeng.com/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%89%88Vue-3-%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%92%8CProxy%E4%BB%A3%E7%90%86/"/>
    <id>http://sunyunzeng.com/自己实现简单版Vue-3-实现数据的双向绑定和Proxy代理/</id>
    <published>2020-02-01T10:49:53.000Z</published>
    <updated>2020-02-01T12:29:53.212Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="数据的双向绑定"><a href="#数据的双向绑定" class="headerlink" title="数据的双向绑定"></a>数据的双向绑定</h1><p>之前我们已经实现数据影响视图，即数据更新调用setter()方法里绑定的方法，通过Dev通知Watcher更新视图。</p><p>然后我们需要实现视图影响数据进而再影响视图。</p><p>通过为input节点利用Object.addEventListener()绑定事件监听，再调用数据更新方法更新数据。</p><p>数据更改后由于之前已经实现了数据更改后页面的自动更新，由此数据自然驱动视图。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译模版具体执行</span></span><br><span class="line"><span class="keyword">const</span> compileUtil = &#123;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">    model(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="keyword">this</span>.getValue(expr, vm);</span><br><span class="line">        <span class="comment">// v-model绑定对应的 Watcher, 数据驱动视图</span></span><br><span class="line">        <span class="keyword">new</span> Watcher(expr, vm, (newVal)=&gt;&#123;</span><br><span class="line">            <span class="keyword">this</span>.updater.modelUpdater(node, newVal);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 视图 =&gt; 数据 =&gt; 视图</span></span><br><span class="line">        node.addEventListener(<span class="string">'input'</span>, (e)=&gt;&#123;</span><br><span class="line">            <span class="keyword">this</span>.setVal(expr, vm, e.target.value);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.updater.modelUpdater(node, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="this-data的代理"><a href="#this-data的代理" class="headerlink" title="this.$data的代理"></a>this.$data的代理</h1><p>我们可以通过在vm对象中使用this.person.name直接修改数据，而不是通过this.$data.person.name实现。</p><p>利用this.$data的代理实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> MVue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="undefined">                person: &#123;</span></span><br><span class="line"><span class="javascript">                    name: <span class="string">'海贼——王路飞'</span>,</span></span><br><span class="line"><span class="undefined">                    age: 18,</span></span><br><span class="line"><span class="javascript">                    fav: <span class="string">'film'</span></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                msg: <span class="string">'最简单的插值'</span>,</span></span><br><span class="line"><span class="xml">                htmlStr: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是v-html<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods:&#123;</span></span><br><span class="line"><span class="javascript">                handleClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'这是一个处理点击事件的方法'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 使用代理的方式可以直接这样修改数据</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.person.name = <span class="string">'海贼王——路飞'</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MVue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="comment">// 初始元素与数据通过options对象绑定</span></span><br><span class="line">        <span class="keyword">this</span>.$el = options.el;</span><br><span class="line">        <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">        <span class="keyword">this</span>.$options = options;</span><br><span class="line">        <span class="comment">// 通过Compiler对象对模版进行编译，例如&#123;&#123;&#125;&#125;插值、v-text、v-html、v-model等Vue语法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">            <span class="comment">// ... 省略</span></span><br><span class="line">            <span class="comment">// 通过数据代理实现 this.person.name = '海贼王——路飞'功能，而不是this.$data.person.name = '海贼王——路飞'</span></span><br><span class="line">            <span class="keyword">this</span>.proxyData(<span class="keyword">this</span>.$data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//用vm代理vm.$data</span></span><br><span class="line">     proxyData(data)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>,key,&#123;</span><br><span class="line">                <span class="keyword">get</span>()&#123;</span><br><span class="line">                    <span class="keyword">return</span> data[key];</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">set</span>(newVal)&#123;</span><br><span class="line">                    data[key] = newVal;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/SUNYunZeng/ImitateVue" target="_blank" rel="noopener">https://github.com/SUNYunZeng/ImitateVue</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;数据的双向绑定&quot;&gt;&lt;a href=&quot;#数据的双向绑定&quot; class=&quot;headerlink&quot; title=&quot;数据的双向绑定&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Web前端" scheme="http://sunyunzeng.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://sunyunzeng.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>自己实现简单版Vue--2. 实现数据绑定视图</title>
    <link href="http://sunyunzeng.com/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%89%88Vue-2-%E5%AE%9A%E4%B9%89Observer%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%8A%AB%E6%8C%81/"/>
    <id>http://sunyunzeng.com/自己实现简单版Vue-2-定义Observer实现对象属性劫持/</id>
    <published>2020-01-31T13:33:24.000Z</published>
    <updated>2020-02-01T12:29:48.577Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="利用Object-defineProperty-方法实现数据的监听"><a href="#利用Object-defineProperty-方法实现数据的监听" class="headerlink" title="利用Object.defineProperty()方法实现数据的监听"></a>利用<code>Object.defineProperty()</code>方法实现数据的监听</h1><p>Object.defineProperty()方法可以具体参考链接：<a href="http://sunyunzeng.com/JavaScript%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1/#%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7">http://sunyunzeng.com/JavaScript%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1/#%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7</a></p><p>该方法可以定义对象数据在访问操作时的一些约定。</p><ol><li>定义 Observer 对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data)&#123;</span><br><span class="line">        <span class="keyword">this</span>.observe(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// data是一个对象，可能嵌套其它对象，需要采用递归遍历的方式进行观察者绑定</span></span><br><span class="line">    observe(data)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data &amp;&amp; <span class="keyword">typeof</span> data === <span class="string">'object'</span>)&#123;</span><br><span class="line">            <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.defineReactive(data, key, data[key]);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过 object.defineProperty方法对对象属性进行劫持</span></span><br><span class="line">    defineReactive(obj, key, value)&#123;</span><br><span class="line">        <span class="comment">// 递归观察</span></span><br><span class="line">        <span class="keyword">this</span>.observe(value);</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            configurable: <span class="literal">false</span>,</span><br><span class="line">            <span class="keyword">get</span>()&#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 采用箭头函数在定义时绑定this的定义域</span></span><br><span class="line">            <span class="keyword">set</span>: (newVal)=&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span>(newVal !== value)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.observe(newVal);</span><br><span class="line">                    value = newVal;</span><br><span class="line">                    <span class="built_in">console</span>.log(newVal);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>利用Observer对象对数据进行劫持</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MVue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="comment">// 初始元素与数据通过options对象绑定</span></span><br><span class="line">        <span class="keyword">this</span>.$el = options.el;</span><br><span class="line">        <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">        <span class="keyword">this</span>.$options = options;</span><br><span class="line">        <span class="comment">// 通过Compiler对象对模版进行编译，例如&#123;&#123;&#125;&#125;插值、v-text、v-html、v-model等Vue语法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">            <span class="comment">// 1. 编译模版</span></span><br><span class="line">            <span class="keyword">new</span> Compiler(<span class="keyword">this</span>.$el, <span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">// 2. 创建观察者，观察数据</span></span><br><span class="line">            <span class="keyword">new</span> Observer(<span class="keyword">this</span>.$data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义Dep容器及Watcher对象对数据变化进行监听</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span></span>&#123;</span><br><span class="line">    <span class="comment">// 通过回调函数实现更新的数据通知到视图</span></span><br><span class="line">    <span class="keyword">constructor</span>(expr, vm, cb)&#123;</span><br><span class="line">        <span class="keyword">this</span>.expr = expr;</span><br><span class="line">        <span class="keyword">this</span>.vm = vm;</span><br><span class="line">        <span class="keyword">this</span>.cb = cb;</span><br><span class="line">        <span class="keyword">this</span>.oldVal = <span class="keyword">this</span>.getOldVal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取旧数据</span></span><br><span class="line">    getOldVal()&#123;</span><br><span class="line">        <span class="comment">// 在利用getValue获取数据调用getter()方法时先把当前观察者挂载</span></span><br><span class="line">        Dep.target = <span class="keyword">this</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(Dep.target);</span><br><span class="line">        <span class="keyword">const</span> oldVal = compileUtil.getValue(<span class="keyword">this</span>.expr, <span class="keyword">this</span>.vm);</span><br><span class="line">        <span class="comment">// 挂载完毕需要注销，防止重复挂载 (数据一更新就会挂载)</span></span><br><span class="line">        Dep.target = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过回调函数更新数据</span></span><br><span class="line">    update()&#123;</span><br><span class="line">        <span class="keyword">const</span> newVal = compileUtil.getValue(<span class="keyword">this</span>.expr, <span class="keyword">this</span>.vm);</span><br><span class="line">        <span class="keyword">if</span>(newVal !== <span class="keyword">this</span>.oldVal)&#123;</span><br><span class="line">            <span class="keyword">this</span>.cb(newVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dep类存储watcher对象，并在数据变化时通知watcher</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.watcherCollector = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加watcher</span></span><br><span class="line">    addWatcher(watcher)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'观察者'</span>, <span class="keyword">this</span>.watcherCollector);</span><br><span class="line">        <span class="keyword">this</span>.watcherCollector.push(watcher);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数据变化时通知watcher更新</span></span><br><span class="line">    notify()&#123;</span><br><span class="line">        <span class="keyword">this</span>.watcherCollector.forEach(<span class="function"><span class="params">w</span>=&gt;</span>w.update());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在Observer中绑定Dev</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">    defineReactive(obj, key, value)&#123;</span><br><span class="line">        <span class="comment">// ... 省略</span></span><br><span class="line">        <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">            <span class="comment">// ... 省略</span></span><br><span class="line">            <span class="keyword">get</span>()&#123;</span><br><span class="line">                <span class="comment">// 订阅数据变化时，往Dev中添加观察者</span></span><br><span class="line">                Dep.target &amp;&amp; dep.addWatcher(Dep.target);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 采用箭头函数在定义时绑定this的定义域</span></span><br><span class="line">            <span class="keyword">set</span>: (newVal)=&gt;&#123;</span><br><span class="line">                <span class="comment">// ... 省略</span></span><br><span class="line">                <span class="comment">// 通知watcher数据发生改变</span></span><br><span class="line">                dep.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>在编译工具中绑定Watcher</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compileUtil = &#123;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">    getContent(expr, vm)&#123;</span><br><span class="line">        <span class="comment">// &#123;&#123;person.name&#125;&#125;--&#123;&#123;person.age&#125;&#125;</span></span><br><span class="line">        <span class="comment">// 防止修改person.name使得所有值全部被替换</span></span><br><span class="line">        <span class="keyword">return</span> expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>, (...args)=&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getValue(args[<span class="number">1</span>], vm);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    text(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">let</span> value;</span><br><span class="line">        <span class="keyword">if</span>(expr.indexOf(<span class="string">'&#123;&#123;'</span>)!==<span class="number">-1</span>)&#123;</span><br><span class="line">            value = expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>, (...args)=&gt;&#123;</span><br><span class="line">                <span class="comment">// text的 Watcher应在此绑定，因为是对插值&#123;&#123;&#125;&#125;进行双向绑定</span></span><br><span class="line">                <span class="comment">// Watcher的构造函数的 getOldVal()方法需要接受数据或者对象，而&#123;&#123;person.name&#125;&#125;不能接收</span></span><br><span class="line">                <span class="keyword">new</span> Watcher(args[<span class="number">1</span>], vm, ()=&gt;&#123;</span><br><span class="line">                    <span class="keyword">this</span>.updater.textUpdater(node, <span class="keyword">this</span>.getContent(expr, vm));</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getValue(args[<span class="number">1</span>], vm);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            value = <span class="keyword">this</span>.getValue(expr, vm);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.updater.textUpdater(node, value);  </span><br><span class="line">    &#125;,</span><br><span class="line">    html(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">let</span> value = <span class="keyword">this</span>.getValue(expr, vm);</span><br><span class="line">        <span class="comment">// html对应的 Watcher</span></span><br><span class="line">        <span class="keyword">new</span> Watcher(expr, vm, (newVal)=&gt;&#123;</span><br><span class="line">            <span class="keyword">this</span>.updater.htmlUpdater(node, newVal);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.updater.htmlUpdater(node, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>在MVue类的构造函数中绑定Observer</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MVue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$el = options.el;</span><br><span class="line">        <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">        <span class="keyword">this</span>.$options = options;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">            <span class="comment">// 1. 创建观察者</span></span><br><span class="line">            <span class="keyword">new</span> Observer(<span class="keyword">this</span>.$data);</span><br><span class="line">            <span class="comment">// 2. 编译模版</span></span><br><span class="line">            <span class="keyword">new</span> Compiler(<span class="keyword">this</span>.$el, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/SUNYunZeng/ImitateVue" target="_blank" rel="noopener">https://github.com/SUNYunZeng/ImitateVue</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;利用Object-defineProperty-方法实现数据的监听&quot;&gt;&lt;a href=&quot;#利用Object-definePropert
      
    
    </summary>
    
      <category term="Web前端" scheme="http://sunyunzeng.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://sunyunzeng.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>自己实现简单版Vue--1. 编译初始Vue模版</title>
    <link href="http://sunyunzeng.com/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%89%88Vue-1-%E7%BC%96%E8%AF%91%E5%88%9D%E5%A7%8BVue%E6%A8%A1%E7%89%88/"/>
    <id>http://sunyunzeng.com/自己实现简单版Vue-1-编译初始Vue模版/</id>
    <published>2020-01-29T11:15:05.000Z</published>
    <updated>2020-02-01T12:29:39.939Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Vue的双向绑定效果如下：</p><img src="/自己实现简单版Vue-1-编译初始Vue模版/demo.gif"><p>Vue的底层到底是怎么实现的呢？</p><p>通过手写简单的示例来学习Vue框架的运行机制。</p><p>Vue是MVVM框架，其实就是MVC框架在前端的体现，其中的控制器(Controller)由View MOdel(VM)代替。</p><p>简单来说，数据更新视图，以及视图更新影响数据这两步操作或者是双向绑定的过程由VM来执行。</p><p>而Vue就是一个VM。</p><p>Vue的可以说是开箱即用，它的使用非常简单，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;person.name&#125;&#125; -- &#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;person.fav&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">'msg'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">'person.name'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">'htmlStr'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'msg'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"handleClick"</span>&gt;</span>v-on:click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>@click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"https://www.bilibili.com/video/av80611222?p=3"</span>&gt;</span>v-bind:href<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./Vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="undefined">                person: &#123;</span></span><br><span class="line"><span class="javascript">                    name: <span class="string">'海贼——王路飞'</span>,</span></span><br><span class="line"><span class="undefined">                    age: 18,</span></span><br><span class="line"><span class="javascript">                    fav: <span class="string">'宝藏'</span></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                msg: <span class="string">'最简单的插值'</span>,</span></span><br><span class="line"><span class="javascript">                htmlStr: <span class="string">'这是v-html'</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods:&#123;</span></span><br><span class="line"><span class="javascript">                handleClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'这是一个处理点击事件的方法'</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 new Vue 新建一个Vue实例，并将元素节点与该实例通过<font color="#f07c82"> el </font>实现双向绑定，之后h5中的元素内容跟对象数据就融为一体，开发者的关注重点可以集中在代码逻辑的设计，而不是繁琐的页面与数据绑定问题。</p><p>我们的实现原理图如下所示：</p><img src="/自己实现简单版Vue-1-编译初始Vue模版/MVVM.png"><ol><li><p>需要实现一个Observer通过Object.defineProperty()劫持数据实现数据的监听。</p></li><li><p>实现一个Dep收集各数据的监听Watcher，负责通知Watcher数据发生变化。</p></li><li><p>实现Watcher对视图进行更新。</p></li><li><p>实现Complier对Vue指令（v-text等）进行解析初始化，以及订阅对应的watcher。</p></li></ol><h1 id="Vue模版的编译"><a href="#Vue模版的编译" class="headerlink" title="Vue模版的编译"></a>Vue模版的编译</h1><p>第一步是将H5中的Vue模版进行编译，使得浏览器能够正确展示对应数据。</p><p>其中包括这几部分的编译：</p><ol><li><p>文本模版中插值表达式的编译<br>也就是双括号中的值能够正确表达出来，例如</p></li><li><p>元素节点中模版表达式的编译<br>例如 v-text、v-model、v-html、 v-on:click、 v-bind等</p></li></ol><h2 id="MVue入口类设计"><a href="#MVue入口类设计" class="headerlink" title="MVue入口类设计"></a>MVue入口类设计</h2><p>Mvue类接收一个参数对象作为初始输入，然后利用<font color="#f07c82">Compiler</font>类对模版进行编译及渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MVue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="comment">// 初始元素与数据通过options对象绑定</span></span><br><span class="line">        <span class="keyword">this</span>.$el = options.el;</span><br><span class="line">        <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">        <span class="keyword">this</span>.$options = options;</span><br><span class="line">        <span class="comment">// 通过Compiler对象对模版进行编译，例如&#123;&#123;&#125;&#125;插值、v-text、v-html、v-model等Vue语法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">            <span class="keyword">new</span> Compiler(<span class="keyword">this</span>.$el, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Complier编译类设计"><a href="#Complier编译类设计" class="headerlink" title="Complier编译类设计"></a>Complier编译类设计</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compileUtil = &#123;</span><br><span class="line">    getValue(expr, vm)&#123;</span><br><span class="line">        <span class="comment">// 处理 person.name 这种对象类型，取出真正的value</span></span><br><span class="line">        <span class="keyword">return</span> expr.split(<span class="string">'.'</span>).reduce(<span class="function">(<span class="params">data,currentVal</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data[currentVal];</span><br><span class="line">        &#125;, vm.$data)</span><br><span class="line">    &#125;,</span><br><span class="line">    text(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">let</span> value;</span><br><span class="line">        <span class="keyword">if</span>(expr.indexOf(<span class="string">'&#123;&#123;'</span>)!==<span class="number">-1</span>)&#123;</span><br><span class="line">            value = expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>, (...args)=&gt;&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getValue(args[<span class="number">1</span>], vm);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            value = <span class="keyword">this</span>.getValue(expr, vm);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.updater.textUpdater(node, value);  </span><br><span class="line">    &#125;,</span><br><span class="line">    html(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="keyword">this</span>.getValue(expr, vm);</span><br><span class="line">        <span class="keyword">this</span>.updater.htmlUpdater(node, value);</span><br><span class="line">    &#125;,</span><br><span class="line">    model(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="keyword">this</span>.getValue(expr, vm);</span><br><span class="line">        <span class="keyword">this</span>.updater.modelUpdater(node, value);</span><br><span class="line">    &#125;,</span><br><span class="line">    on(node, expr, vm, detailStr) &#123;</span><br><span class="line">        <span class="keyword">let</span> fn = vm.$options.methods &amp;&amp; vm.$options.methods[expr];</span><br><span class="line">        node.addEventListener(detailStr,fn.bind(vm), <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    bind(node, expr, vm, detailStr)&#123;</span><br><span class="line">        <span class="comment">// v-on:href='...' =&gt; href='...'</span></span><br><span class="line">        node.setAttribute(detailStr, expr);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 视图更新函数</span></span><br><span class="line">    updater: &#123;</span><br><span class="line">        textUpdater(node, value) &#123;</span><br><span class="line">            node.textContent = value;</span><br><span class="line">        &#125;,</span><br><span class="line">        htmlUpdater(node, value)&#123;</span><br><span class="line">            node.innerHTML = value;</span><br><span class="line">        &#125;,</span><br><span class="line">        modelUpdater(node, value)&#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译HTML模版对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(el, vm) &#123;</span><br><span class="line">        <span class="keyword">this</span>.el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el);</span><br><span class="line">        <span class="keyword">this</span>.vm = vm;</span><br><span class="line">        <span class="comment">// 1. 将预编译的元素节点放入文档碎片对象中，避免DOM频繁的回流与重绘，提高渲染性能</span></span><br><span class="line">        <span class="keyword">const</span> fragments = <span class="keyword">this</span>.node2fragments(<span class="keyword">this</span>.el);</span><br><span class="line">        <span class="comment">// 2. 编译模版</span></span><br><span class="line">        <span class="keyword">this</span>.compile(fragments);</span><br><span class="line">        <span class="comment">// 3. 追加子元素到根元素</span></span><br><span class="line">        <span class="keyword">this</span>.el.appendChild(fragments);</span><br><span class="line">    &#125;</span><br><span class="line">    compile(fragments) &#123;</span><br><span class="line">        <span class="comment">// 1.获取子节点</span></span><br><span class="line">        <span class="keyword">const</span> childNodes = fragments.childNodes;</span><br><span class="line">        <span class="comment">// 2.递归循环编译</span></span><br><span class="line">        [...childNodes].forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是元素节点</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isElementNode(child)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.compileElement(child);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 文本节点</span></span><br><span class="line">                <span class="keyword">this</span>.compileText(child);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//递归遍历</span></span><br><span class="line">            <span class="keyword">if</span>(child.childNodes &amp;&amp; child.childNodes.length)&#123;</span><br><span class="line">                <span class="keyword">this</span>.compile(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    compileElement(node) &#123;</span><br><span class="line">        <span class="keyword">let</span> attributes = node.attributes;</span><br><span class="line">        <span class="comment">// 对于每个属性进行遍历编译</span></span><br><span class="line">        <span class="comment">// attributes是类数组，因此需要先转数组</span></span><br><span class="line">        [...attributes].forEach(<span class="function"><span class="params">attr</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;name,value&#125; = attr; <span class="comment">// v-text="msg"  v-html=htmlStr  type="text"  v-model="msg"</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isDirector(name)) &#123; <span class="comment">// v-text  v-html  v-mode  v-bind  v-on:click v-bind:href=''</span></span><br><span class="line">                <span class="keyword">let</span> [, directive] = name.split(<span class="string">'-'</span>);</span><br><span class="line">                <span class="keyword">let</span> [compileKey, detailStr] = directive.split(<span class="string">':'</span>);</span><br><span class="line">                <span class="comment">// 更新数据，数据驱动视图</span></span><br><span class="line">                compileUtil[compileKey](node, value, <span class="keyword">this</span>.vm, detailStr);</span><br><span class="line">                <span class="comment">// 删除有指令的标签属性 v-text v-html等，普通的value等原生html标签不必删除</span></span><br><span class="line">                node.removeAttribute(<span class="string">'v-'</span> + directive);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.isEventName(name))&#123;</span><br><span class="line">                <span class="comment">// 如果是事件处理 @click='handleClick'</span></span><br><span class="line">                <span class="keyword">let</span> [, detailStr] = name.split(<span class="string">'@'</span>);</span><br><span class="line">                compileUtil[<span class="string">'on'</span>](node, value, <span class="keyword">this</span>.vm, detailStr);</span><br><span class="line">                node.removeAttribute(<span class="string">'@'</span> + detailStr);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    compileText(node) &#123;</span><br><span class="line">        <span class="comment">// 编译文本中的&#123;&#123;person.name&#125;&#125;--&#123;&#123;person.age&#125;&#125;</span></span><br><span class="line">        <span class="keyword">const</span> content = node.textContent;</span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>.test(content))&#123;</span><br><span class="line">            compileUtil[<span class="string">'text'</span>](node, content, <span class="keyword">this</span>.vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    isEventName(attrName)&#123;</span><br><span class="line">        <span class="comment">// 判断是否@开头</span></span><br><span class="line">        <span class="keyword">return</span> attrName.startsWith(<span class="string">'@'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    isDirector(attrName) &#123;</span><br><span class="line">        <span class="comment">// 判断是否为Vue特性标签</span></span><br><span class="line">        <span class="keyword">return</span> attrName.startsWith(<span class="string">'v-'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    node2fragments(el) &#123;</span><br><span class="line">        <span class="comment">// 创建文档碎片对象</span></span><br><span class="line">        <span class="keyword">const</span> f = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">        <span class="keyword">let</span> firstChild;</span><br><span class="line">        <span class="keyword">while</span> (firstChild = el.firstChild) &#123;</span><br><span class="line">            f.appendChild(firstChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">    isElementNode(node) &#123;</span><br><span class="line">        <span class="comment">// 元素节点的nodeType属性为 1</span></span><br><span class="line">        <span class="keyword">return</span> node.nodeType === <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/SUNYunZeng/ImitateVue" target="_blank" rel="noopener">https://github.com/SUNYunZeng/ImitateVue</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Vue的双
      
    
    </summary>
    
      <category term="Web前端" scheme="http://sunyunzeng.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://sunyunzeng.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JS异步函数小结</title>
    <link href="http://sunyunzeng.com/JS%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%E5%B0%8F%E7%BB%93/"/>
    <id>http://sunyunzeng.com/JS异步函数小结/</id>
    <published>2020-01-04T07:49:12.000Z</published>
    <updated>2020-01-11T13:36:40.710Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:50 GMT+0800 (GMT+08:00) --><h1 id="JS的异步"><a href="#JS的异步" class="headerlink" title="JS的异步"></a>JS的异步</h1><p>JavaScript的执行环境是<strong>单线程的</strong>，对于http事件触发线程、浏览器事件触发线程、浏览器定时器等浏览器会单独开辟出一个异步线程处理，处理完毕后，加入任务队列，等待JS主线程调用执行。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'触发了'</span>),<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我先触发'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我先触发</span></span><br><span class="line"><span class="comment">触发了</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>虽然setTimeout()被设置为马上触发，但是setTimeout触发的异步任务需先放在任务队列中，等主线程中console()函数执行完毕后，再能被触发。</p><blockquote><p>JavaScript执行环境(浏览器)是从头到尾一行一行往下执行，但是遇到异步任务，先放入任务队列，等待主线程可以执行该任务，才被执行。</p></blockquote><p>详细的JS代码执行顺序可查看 <a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">https://juejin.im/post/59e85eebf265da430d571f89</a></p><p>异步程序在JS代码中很常见，因为Web应用总归要与远方的服务器交互，请求数据，这个过程需要异步进行。否则，浏览器会一直卡住，直到结果请求完毕。</p><p>我们先看一下最简单的回调函数：setTimeout() 与 setsetInterval()，它们都是Windows对象的自带方法。</p><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>setTimeout()表示指定一个异步程序，在规定的时间后执行，但不保证百分百执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2000ms后执行 console.log()</span></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">"执行啦！"</span>), <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">let</span> innerFun = <span class="function"><span class="keyword">function</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(test);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(innerFun, <span class="number">2000</span>, <span class="string">'执行啦！'</span>);</span><br></pre></td></tr></table></figure><p>如果前面有耗时的密集计算，哪怕setTimeout()设定了在很短的时间后执行，也要等主线程执行完毕，所以说 setTimeout()的延迟时间为理想时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预期1s后执行console.log()</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="keyword">let</span> innerFun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log((<span class="built_in">Date</span>.now()-s)/<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(innerFun, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">let</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j =<span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">        m += j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实际5.547后执行</span></span><br></pre></td></tr></table></figure><p>clearTimeout() 方法可取消由 setTimeout() 方法设置的定时操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"执行!"</span>), <span class="number">1000</span>);</span><br><span class="line">clearTimeout(timeout);</span><br></pre></td></tr></table></figure><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>setInterval()跟setTimeout用法类似，只不过不是执行一次，而是如果不停止就永远重复执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每1000ms执行一次setInterval</span></span><br><span class="line"><span class="keyword">let</span> i =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> interval = setInterval(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(i++), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>clearInterval()可以清除interval操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clearInterval(interval);</span><br></pre></td></tr></table></figure><p>setInterval()指定的时间也是理想的时间，该时间包括程序本身的运行时间。如果程序本身运行时间大于指定时间，则setInterval()无法满足间隔时间定时运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Date</span>.now();</span><br><span class="line">innerFun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j =<span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">            m += j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log((<span class="built_in">Date</span>.now() - s)/<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(innerFun, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 每次的运行时间都远远大于1s</span></span><br></pre></td></tr></table></figure><p>如果你想无论程序执行多长时间，每间隔固定时间都触发程序，你可以利用setTimeout()递归实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> run = setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">recur</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i++);</span><br><span class="line">    setTimeout(recur, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>上面的程序可以保证每隔1000ms就执行console.log()方法，而不用管程序的执行时间。</p><blockquote><p>setTimeout() 与 setInterval()都是系统自带的基础的异步程序添加方法，可以时间指定延迟时间触发程序。</p></blockquote><p>旧版本JS的异步是依靠回调函数实现的，例如传统的AJAX：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>('ajax/text.html', function(data)&#123;</span><br><span class="line">    <span class="comment">// doSomeThing</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> success(request.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fail(request.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是回调函数之间往往存在依赖关系，即下一次回调函数的执行依赖于上一次回调函数的执行结果，然后，当这种依赖变得越来越多，代码的可读性就变得很差，此时称为“回调地狱”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// callback hall</span></span><br><span class="line">chooseToppings(<span class="function"><span class="keyword">function</span>(<span class="params">toppings</span>) </span>&#123;</span><br><span class="line">  placeOrder(toppings, <span class="function"><span class="keyword">function</span>(<span class="params">order</span>) </span>&#123;</span><br><span class="line">    collectOrder(order, <span class="function"><span class="keyword">function</span>(<span class="params">pizza</span>) </span>&#123;</span><br><span class="line">      eatPizza(pizza);</span><br><span class="line">    &#125;, failureCallback);</span><br><span class="line">  &#125;, failureCallback);</span><br><span class="line">&#125;, failureCallback)</span><br></pre></td></tr></table></figure><p>此时还有一个问题，就是对于每个回调函数，都要重复写一个对应的 catch 失败的函数，显然是非常冗余的，因此，ES6提出了<font color="#f07c82"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a></font>方法！</p><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>Promise，英语单词，承诺，就像它的名称一样，Promise对象一定会实现它的诺言，也就是执行的结果无论成功与失败，都会给你一个答复。</p><p>Promise是一个构造器，可以生成Promise对象，是ES6异步编程的解决方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="comment">/*异步执行成功*/</span>)&#123;</span><br><span class="line">        resolve(res);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise在异步过程中一共有三个状态，<strong>pending</strong>等待结果状态,<strong>fullfilled</strong>的执行成功状态以及<strong>rejected</strong>拒绝状态。</p><p>三个状态之间转换关系为：</p><blockquote><p>pending状态 -&gt; fullfilled 状态<br>pending状态 -&gt; rejected 状态</p></blockquote><p>pending无论转向哪两个状态都是resloved(已完成)状态。</p><p>一般resolved状态表示fullfilled状态，这是习惯的写法。</p><h2 id="Promise-then"><a href="#Promise-then" class="headerlink" title="Promise.then()"></a>Promise.then()</h2><p>then()方法是Promise原型对象的方法，Promise.prototype.then()。该方法接受两个参数， promise.then(onFulfilled, onRejected)，一个是异步函数执行成功的处理函数，一个是执行失败的处理函数。但是错误处理函数最好在处理语句的最后用Promise.catch()方法捕获（后面会讲到），因为可提高代码的可读性。</p><p><strong>then()方法的onFulfilled传参要求如下：</strong></p><ol><li><strong>必须是函数，不是函数被忽略。</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>resolve(<span class="string">'你好'</span>));</span><br><span class="line"></span><br><span class="line">promise.then(<span class="string">'JS'</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span><span class="built_in">console</span>.log(result));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 你好，最开始的JS被忽略</span></span><br></pre></td></tr></table></figure><ol start="2"><li>其参数必须是上个then()或Promise函数所返回。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(<span class="string">'Promise返回的'</span>);</span><br><span class="line"><span class="keyword">let</span> ordinal = <span class="function"><span class="params">()</span>=&gt;</span><span class="string">'仅仅函数返回的'</span>;</span><br><span class="line">promise.then(<span class="function">(<span class="params">result</span>) =&gt;</span><span class="built_in">console</span>.log(result)).then(ordinal).then(<span class="function">(<span class="params">result</span>) =&gt;</span><span class="built_in">console</span>.log(result));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise返回的</span></span><br><span class="line"><span class="comment">// 仅仅函数返回的</span></span><br></pre></td></tr></table></figure><ol start="3"><li>如果函数没有返回值，则返回 undefined</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ordinal = <span class="function"><span class="params">()</span>=&gt;</span><span class="string">'仅仅函数返回的'</span>;</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ordinal();</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span><span class="built_in">console</span>.log(result));</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ol start="4"><li>then()方法只执行一次。</li></ol><p>由上规则的值，then()存在链式法则，一系列异步操作可以通过一系列的then()方法连接。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chooseToppings()</span><br><span class="line">.then(<span class="function"><span class="params">toppings</span> =&gt;</span> placeOrder(toppings))</span><br><span class="line">.then(<span class="function"><span class="params">order</span> =&gt;</span> collectOrder(order))</span><br><span class="line">.then(<span class="function"><span class="params">pizza</span> =&gt;</span> eatPizza(pizza))</span><br><span class="line">.catch(failureCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">chooseToppings().then(placeOrder).then(collectOrder).then(eatPizza).catch(failureCallback);</span><br></pre></td></tr></table></figure><h2 id="Promise-catch"><a href="#Promise-catch" class="headerlink" title="Promise.catch"></a>Promise.catch</h2><p>catch()方法是Promise原型对象的方法，Promise.prototype.catch()，用来捕获错误。</p><blockquote><p>最佳实战：永远在then()调用链的最后使用，可以捕获异步操作的任意步骤出现的错误。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chooseToppings().then(placeOrder).then(collectOrder).then(eatPizza).catch(failureCallback);</span><br></pre></td></tr></table></figure><h2 id="Promise-finally"><a href="#Promise-finally" class="headerlink" title="Promise.finally"></a>Promise.finally</h2><p>finally()方法是Promise原型对象的方法，Promise.prototype.finally()，用来最异步操作执行后（无论成功还是失败）都执行的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chooseToppings().then(placeOrder).then(collectOrder).then(eatPizza).catch(failureCallback).finally(server.stop);</span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>可以令多个Pormise并行执行，等所有的Promise都执行完毕，然后按照Promise的顺序返回一个由结果构成的Array。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">'成功了'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">'success'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = Promse.reject(<span class="string">'失败'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)               <span class="comment">//['成功了', 'success']</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1,p3,p2]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)      <span class="comment">// 失败了，打出 '失败'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h2><p>Promise.resolve()将现有对象转为Promise对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'foo'</span>))</span><br></pre></td></tr></table></figure><p>Promise的参数分为四种情况:</p><ol><li><p>参数是Promise实例，则依旧返回Promise实例。</p></li><li><p>参数是一个 thenable 对象，则将该对象转为 Promise 对象，并立即执行。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">  then: <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">42</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(thenable);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);  <span class="comment">// 42</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(<span class="string">'Hello'</span>);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><ol start="4"><li>不带有任何参数</li></ol><p>Promise.resolve方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'three'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'two'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>立即resolve的 Promise 对象是在事件循环中当前宏任务的后面添加微任务，因此需要等当前宏任务结束后再执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>)).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:50 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;JS的异步&quot;&gt;&lt;a href=&quot;#JS的异步&quot; class=&quot;headerlink&quot; title=&quot;JS的异步&quot;&gt;&lt;/a&gt;JS的异步&lt;
      
    
    </summary>
    
      <category term="Web前端" scheme="http://sunyunzeng.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://sunyunzeng.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 72.编辑距离</title>
    <link href="http://sunyunzeng.com/LeetCode-72-%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
    <id>http://sunyunzeng.com/LeetCode-72-编辑距离/</id>
    <published>2020-01-02T02:02:16.000Z</published>
    <updated>2020-01-11T13:36:40.737Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h1><p>给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：</p><p>插入一个字符<br>删除一个字符<br>替换一个字符<br>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: word1 = <span class="string">"horse"</span>, word2 = <span class="string">"ros"</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: </span><br><span class="line">horse -&gt; rorse (将 <span class="string">'h'</span> 替换为 <span class="string">'r'</span>)</span><br><span class="line">rorse -&gt; rose (删除 <span class="string">'r'</span>)</span><br><span class="line">rose -&gt; ros (删除 <span class="string">'e'</span>)</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: word1 = <span class="string">"intention"</span>, word2 = <span class="string">"execution"</span></span><br><span class="line">输出: <span class="number">5</span></span><br><span class="line">解释: </span><br><span class="line">intention -&gt; inention (删除 <span class="string">'t'</span>)</span><br><span class="line">inention -&gt; enention (将 <span class="string">'i'</span> 替换为 <span class="string">'e'</span>)</span><br><span class="line">enention -&gt; exention (将 <span class="string">'n'</span> 替换为 <span class="string">'x'</span>)</span><br><span class="line">exention -&gt; exection (将 <span class="string">'n'</span> 替换为 <span class="string">'c'</span>)</span><br><span class="line">exection -&gt; execution (插入 <span class="string">'u'</span>)</span><br></pre></td></tr></table></figure><h2 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路 + 代码"></a>思路 + 代码</h2><ul><li><p>问题1：如果 word1[0..i-1] 到 word2[0..j-1] 的变换需要消耗 k 步，那 word1[0..i] 到 word2[0..j] 的变换需要几步呢？</p></li><li><p>答：先使用 k 步，把 word1[0..i-1] 变换到 word2[0..j-1]，消耗 k 步。再把 word1[i] 改成 word2[j]，就行了。如果 word1[i] == word2[j]，什么也不用做，一共消耗 k 步，否则需要修改，一共消耗 k + 1 步。</p></li><li><p>问题2：如果 word1[0..i-1] 到 word2[0..j] 的变换需要消耗 k 步，那 word1[0..i] 到 word2[0..j] 的变换需要消耗几步呢？</p></li><li><p>答：先经过 k 步，把 word1[0..i-1] 变换到 word2[0..j]，消耗掉 k 步，再把 word1[i] 删除，这样，word1[0..i] 就完全变成了 word2[0..j] 了。一共 k + 1 步。</p></li><li><p>问题3：如果 word1[0..i] 到 word2[0..j-1] 的变换需要消耗 k 步，那 word1[0..i] 到 word2[0..j] 的变换需要消耗几步呢？</p></li><li><p>答：先经过 k 步，把 word1[0..i] 变换成 word2[0..j-1]，消耗掉 k 步，接下来，再插入一个字符 word2[j], word1[0..i] 就完全变成了 word2[0..j] 了。</p></li></ul><p>从上面三个问题来看，word1[0..i] 变换成 word2[0..j] 主要有三种手段，用哪个消耗少，就用哪个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, word1, word2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type word1: str</span></span><br><span class="line"><span class="string">        :type word2: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m, n = len(word1), len(word2)</span><br><span class="line">        dp = [[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(m+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m+<span class="number">1</span>):</span><br><span class="line">            dp[i][<span class="number">0</span>] = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n+<span class="number">1</span>):</span><br><span class="line">            dp[<span class="number">0</span>][j] = j</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">                <span class="comment"># 如果当前的字符相等，则最小操作数与dp[i-1][j-1]相同</span></span><br><span class="line">                <span class="keyword">if</span> word1[i<span class="number">-1</span>]==word2[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], min(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]))+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/edit-distance" target="_blank" rel="noopener">https://leetcode-cn.com/problems/edit-distance</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="只有两个键的键盘"><a href="#只有两个键的键盘" class="headerlink" title="只有两个键的键盘"></a>只有两个键的键盘</h1><p>最初在一个记事本上只有一个字符 ‘A’。你每次可以对这个记事本进行两种操作：</p><p>Copy All (复制全部) : 你可以复制这个记事本中的所有字符(部分的复制是不允许的)。<br>Paste (粘贴) : 你可以粘贴你上一次复制的字符。<br>给定一个数字 n 。你需要使用最少的操作次数，在记事本中打印出恰好 n 个 ‘A’。输出能够打印出 n 个 ‘A’ 的最少操作次数。</p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">3</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释:</span><br><span class="line">最初, 我们只有一个字符 <span class="string">'A'</span>。</span><br><span class="line">第 <span class="number">1</span> 步, 我们使用 Copy All 操作。</span><br><span class="line">第 <span class="number">2</span> 步, 我们使用 Paste 操作来获得 <span class="string">'AA'</span>。</span><br><span class="line">第 <span class="number">3</span> 步, 我们使用 Paste 操作来获得 <span class="string">'AAA'</span>。</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">n 的取值范围是 [<span class="number">1</span>, <span class="number">1000</span>] 。</span><br></pre></td></tr></table></figure><h2 id="思路-代码-1"><a href="#思路-代码-1" class="headerlink" title="思路 + 代码"></a>思路 + 代码</h2><p>动态规划。例如 9 ，从数字 8 开始依次找其最大除数，例如是3.<br>那么<code>dp[9] = d[3] + 9/3</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSteps</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dp = [<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">                    dp[i] = dp[j] + i//j</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/2-keys-keyboard" target="_blank" rel="noopener">https://leetcode-cn.com/problems/2-keys-keyboard</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;编辑距离&quot;&gt;&lt;a href=&quot;#编辑距离&quot; class=&quot;headerlink&quot; title=&quot;编辑距离&quot;&gt;&lt;/a&gt;编辑距离&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://sunyunzeng.com/categories/Algorithm/"/>
    
    
      <category term="Dynamic Programming" scheme="http://sunyunzeng.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>2020来了</title>
    <link href="http://sunyunzeng.com/2020%E6%9D%A5%E4%BA%86/"/>
    <id>http://sunyunzeng.com/2020来了/</id>
    <published>2020-01-01T03:18:31.000Z</published>
    <updated>2020-01-11T13:36:40.705Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:50 GMT+0800 (GMT+08:00) --><h1 id="它真的来了"><a href="#它真的来了" class="headerlink" title="它真的来了"></a>它真的来了</h1><p>不知不觉，2020年悄悄咪咪的来了。</p><p>回顾2019年，一言以蔽之，<strong>尚可</strong>。回首当时立下的很多 Flag，也都完成了。还不错。</p><p>2019年，自己读了一些书，做了一些事，也经历了一些事。</p><p>2020年，也注定是不平凡的一年。或许以后人生的轨迹，就在这仿佛平常的一年中决定或改变了。</p><p>2020年，是中国全面建成小康社会关键的一年，是脱贫攻坚战的关键时期，也是我的“工作年”。</p><p>2020年，愿我们，<strong>不忘初心，方得始终！</strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:50 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;它真的来了&quot;&gt;&lt;a href=&quot;#它真的来了&quot; class=&quot;headerlink&quot; title=&quot;它真的来了&quot;&gt;&lt;/a&gt;它真的来了&lt;
      
    
    </summary>
    
      <category term="Jottings" scheme="http://sunyunzeng.com/categories/Jottings/"/>
    
    
      <category term="Diary" scheme="http://sunyunzeng.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 474.一和零</title>
    <link href="http://sunyunzeng.com/LeetCode-474-%E4%B8%80%E5%92%8C%E9%9B%B6/"/>
    <id>http://sunyunzeng.com/LeetCode-474-一和零/</id>
    <published>2019-12-28T03:24:01.000Z</published>
    <updated>2020-01-11T13:36:40.730Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在计算机界中，我们总是追求用有限的资源获取最大的收益。</p><p>现在，假设你分别支配着 m 个 0 和 n 个 1。另外，还有一个仅包含 0 和 1 字符串的数组。</p><p>你的任务是使用给定的 m 个 0 和 n 个 1 ，找到能拼出存在于数组中的字符串的最大数量。每个 0 和 1 至多被使用一次。</p><p>注意:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给定 <span class="number">0</span> 和 <span class="number">1</span> 的数量都不会超过 <span class="number">100</span>。</span><br><span class="line">给定字符串数组的长度不会超过 <span class="number">600</span>。</span><br></pre></td></tr></table></figure><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: Array = &#123;<span class="string">"10"</span>, <span class="string">"0001"</span>, <span class="string">"111001"</span>, <span class="string">"1"</span>, <span class="string">"0"</span>&#125;, m = <span class="number">5</span>, n = <span class="number">3</span></span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">解释: 总共 <span class="number">4</span> 个字符串可以通过 <span class="number">5</span> 个 <span class="number">0</span> 和 <span class="number">3</span> 个 <span class="number">1</span> 拼出，即 <span class="string">"10"</span>,<span class="string">"0001"</span>,<span class="string">"1"</span>,<span class="string">"0"</span> 。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: Array = &#123;<span class="string">"10"</span>, <span class="string">"0"</span>, <span class="string">"1"</span>&#125;, m = <span class="number">1</span>, n = <span class="number">1</span></span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>解释: 你可以拼出 “10”，但之后就没有剩余数字了。更好的选择是拼出 “0” 和 “1” 。</p><p><strong>题解</strong></p><p>多维背包，动态规划方程：<code>dp[i][j]=max(dp[i][j], dp[i-conut_0][j-count_1])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMaxForm</span><span class="params">(self, strs, m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(strs)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(m+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> strs:</span><br><span class="line">            count_0, count_1 = item.count(<span class="string">'0'</span>), item.count(<span class="string">'1'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(m, count_0<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(n, count_1<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    dp[i][j] = max(dp[i][j], dp[i-count_0][j-count_1]+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/ones-and-zeroes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/ones-and-zeroes</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="零钱兑换"><a href="#零钱兑换" class="headerlink" title="零钱兑换"></a>零钱兑换</h1><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: coins = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], amount = <span class="number">11</span></span><br><span class="line">输出: <span class="number">3</span> </span><br><span class="line">解释: <span class="number">11</span> = <span class="number">5</span> + <span class="number">5</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: coins = [<span class="number">2</span>], amount = <span class="number">3</span></span><br><span class="line">输出: -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>说明:<br>你可以认为每种硬币的数量是无限的。</p><p><strong>题解</strong></p><p>背包问题，无限背包，从小到大遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins, amount)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type coins: List[int]</span></span><br><span class="line"><span class="string">        :type amount: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dp = [float(<span class="string">'inf'</span>)]*(amount+<span class="number">1</span>) </span><br><span class="line">        dp[<span class="number">0</span>] = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(coin, amount+<span class="number">1</span>):</span><br><span class="line">                dp[i] = min(dp[i], dp[i-coin]+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>] <span class="keyword">if</span> dp[<span class="number">-1</span>] != float(<span class="string">'inf'</span>) <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/coin-change" target="_blank" rel="noopener">https://leetcode-cn.com/problems/coin-change</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="零钱兑换-II"><a href="#零钱兑换-II" class="headerlink" title="零钱兑换 II"></a>零钱兑换 II</h1><p>给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。</p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: amount = <span class="number">5</span>, coins = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line">解释: 有四种方式可以凑成总金额:</span><br><span class="line"><span class="number">5</span>=<span class="number">5</span></span><br><span class="line"><span class="number">5</span>=<span class="number">2</span>+<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="number">5</span>=<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">5</span>=<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: amount = <span class="number">3</span>, coins = [<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>解释: 只用面额2的硬币不能凑成总金额3。</p><p>示例 3:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: amount = <span class="number">10</span>, coins = [<span class="number">10</span>] </span><br><span class="line">输出: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意:</p><p>你可以假设：<br>0 &lt;= amount (总金额) &lt;= 5000<br>1 &lt;= coin (硬币面额) &lt;= 5000<br>硬币种类不超过 500 种<br>结果符合 32 位符号整数</p><p><strong>题解</strong></p><p>无限背包，注意递归条件是 <code>dp[i] += dp[i-coin]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(self, amount, coins)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type amount: int</span></span><br><span class="line"><span class="string">        :type coins: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dp = [<span class="number">0</span>]*(amount+<span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(coin, amount+<span class="number">1</span>):</span><br><span class="line">                dp[i] += dp[i-coin]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/coin-change-2" target="_blank" rel="noopener">https://leetcode-cn.com/problems/coin-change-2</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="单词拆分"><a href="#单词拆分" class="headerlink" title="单词拆分"></a>单词拆分</h1><p>给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><p>说明：</p><p>拆分时可以重复使用字典中的单词。<br>你可以假设字典中没有重复的单词。<br>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">"leetcode"</span>, wordDict = [<span class="string">"leet"</span>, <span class="string">"code"</span>]</span><br><span class="line">输出: <span class="keyword">true</span></span><br><span class="line">解释: 返回 <span class="keyword">true</span> 因为 <span class="string">"leetcode"</span> 可以被拆分成 <span class="string">"leet code"</span>。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">"applepenapple"</span>, wordDict = [<span class="string">"apple"</span>, <span class="string">"pen"</span>]</span><br><span class="line">输出: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>解释: 返回 true 因为 “applepenapple” 可以被拆分成 “apple pen apple”。<br>注意你可以重复使用字典中的单词。</p><p>示例 3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">"catsandog"</span>, wordDict = [<span class="string">"cats"</span>, <span class="string">"dog"</span>, <span class="string">"sand"</span>, <span class="string">"and"</span>, <span class="string">"cat"</span>]</span><br><span class="line">输出: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>采用动态规划 <code>dp[i]</code>表示 截止 s 字符串的 i 位置的子字符串是否能被单词字典里的单词来表示。</p><p><code>dp[i]</code>为真的条件为：</p><ol><li><code>dp[j]</code>为真</li><li><code>dp[j:i]</code>表示的字符串存在于字典中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordBreak</span><span class="params">(self, s, wordDict)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type wordDict: List[str]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># dp[i]表示s[i]是否可用wordDict里的元素表示</span></span><br><span class="line">        <span class="comment"># dp[i]能够被表示的前提是dp[j]可用wordDict里元素表示，而且dp[j:i]存在于wordDict中</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果字典为空，字符串为空，则返回true，否则返回false</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> wordDict: <span class="keyword">return</span> <span class="keyword">not</span> s</span><br><span class="line">        size = len(s)</span><br><span class="line">        dp = [<span class="literal">False</span>]*(size+<span class="number">1</span>)</span><br><span class="line">        wordDict = list(set(wordDict))</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, size+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> dp[j] <span class="keyword">and</span> dp[j:i] <span class="keyword">in</span> wordDict:</span><br><span class="line">                    dp[i] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/word-break" target="_blank" rel="noopener">https://leetcode-cn.com/problems/word-break</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a>组合总和</h1><p>给定一个由正整数组成且不存在重复数字的数组，找出和为给定目标正整数的组合的个数。</p><p>示例:</p><p>nums = [1, 2, 3]<br>target = 4</p><p>所有可能的组合为：<br>(1, 1, 1, 1)<br>(1, 1, 2)<br>(1, 2, 1)<br>(1, 3)<br>(2, 1, 1)<br>(2, 2)<br>(3, 1)</p><p>请注意，顺序不同的序列被视作不同的组合。</p><p>因此输出为 7。<br>进阶：<br>如果给定的数组中含有负数会怎么样？<br>问题会产生什么变化？<br>我们需要在题目中添加什么限制来允许负数的出现？</p><p><strong>题解</strong></p><p>思路与零钱兑换一模一样，代码甚至都一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum4</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        size = len(nums)</span><br><span class="line">        dp = [<span class="number">0</span>]*(target+<span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, target+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> i&gt;=n:</span><br><span class="line">                    dp[i] += dp[i-n]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/combination-sum-iv" target="_blank" rel="noopener">https://leetcode-cn.com/problems/combination-sum-iv</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;在计算机界
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://sunyunzeng.com/categories/Algorithm/"/>
    
    
      <category term="Dynamic Programming" scheme="http://sunyunzeng.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1143.最长公共子序列</title>
    <link href="http://sunyunzeng.com/LeetCode-1143-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://sunyunzeng.com/LeetCode-1143-最长公共子序列/</id>
    <published>2019-12-27T09:04:47.000Z</published>
    <updated>2020-01-11T13:36:40.722Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h1><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列。</p><p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。</p><p>若这两个字符串没有公共子序列，则返回 0。</p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：text1 = <span class="string">"abcde"</span>, text2 = <span class="string">"ace"</span> </span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><p>解释：最长公共子序列是 “ace”，它的长度为 3。<br>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：text1 = <span class="string">"abc"</span>, text2 = <span class="string">"abc"</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><p>解释：最长公共子序列是 “abc”，它的长度为 3。<br>示例 3:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：text1 = <span class="string">"abc"</span>, text2 = <span class="string">"def"</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><p>解释：两个字符串没有公共子序列，返回 0。</p><p>提示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;= text1.length &lt;= <span class="number">1000</span></span><br><span class="line"><span class="number">1</span> &lt;= text2.length &lt;= <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>输入的字符串只含有小写英文字符。</p><p><strong>题解</strong></p><p>动态规划，不过要设计一个二维数组dp，来统计<code>dp[i][j]</code>时对应 text1 在 i 位置与text2 在 j 位置时两子字符串对应的最长公共子序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonSubsequence</span><span class="params">(self, text1, text2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type text1: str</span></span><br><span class="line"><span class="string">        :type text2: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l1, l2 = len(text1), len(text2)</span><br><span class="line">        <span class="keyword">if</span> l1==<span class="number">0</span> <span class="keyword">or</span> l2==<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(l2+<span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(l1+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,l1+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,l2+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> text1[i<span class="number">-1</span>]==text2[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = max(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[l1][l2]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-common-subsequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-subsequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="两个字符串的删除操作-最长公共子序列的变体"><a href="#两个字符串的删除操作-最长公共子序列的变体" class="headerlink" title="两个字符串的删除操作(最长公共子序列的变体)"></a>两个字符串的删除操作(最长公共子序列的变体)</h1><p>给定两个单词 word1 和 word2，找到使得 word1 和 word2 相同所需的最小步数，每步可以删除任意一个字符串中的一个字符。</p><p>示例 1:</p><p>输入: “sea”, “eat”<br>输出: 2<br>解释: 第一步将”sea”变为”ea”，第二步将”eat”变为”ea”<br>说明:</p><p>给定单词的长度不超过500。<br>给定单词中的字符只含有小写字母。</p><h2 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路 + 代码"></a>思路 + 代码</h2><p>最长公共子序列的变体，其实就是求最长公共自序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, word1, word2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type word1: str</span></span><br><span class="line"><span class="string">        :type word2: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m, n = len(word1), len(word2)</span><br><span class="line">        dp = [[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(m+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> word1[i<span class="number">-1</span>]==word2[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = max(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> m+n<span class="number">-2</span>*dp[m][n]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/delete-operation-for-two-strings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/delete-operation-for-two-strings</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="分割等和子集"><a href="#分割等和子集" class="headerlink" title="分割等和子集"></a>分割等和子集</h1><p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p>注意:</p><p>每个数组中的元素不会超过 100<br>数组的大小不会超过 200</p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">5</span>]</span><br><span class="line">输出: <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">解释: 数组可以分割成 [<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>] 和 [<span class="number">11</span>].</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">输出: <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">解释: 数组不能分割成两个元素和相等的子集.</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>这是一道以 0-1 背包问题为背景的算法练习题，我们把这个题目翻译一下：</p><p>给定一个只包含正整数的非空数组。是否可以从这个数组中挑选出一些正整数，每个数只能用一次，使得这些数的和等于整个数组元素的和的一半。</p><p>0-1 背包问题也是最基础的背包问题，它的特点是：待挑选的物品有且仅有一个，可以选择也可以不选择。下面我们定义状态，不妨就用问题的问法定义状态试试看。</p><blockquote><p>dp[i][j]：表示从数组的 [0, i] 这个子区间内挑选一些正整数，每个数只能用一次，使得这些数的和等于 j。</p></blockquote><p>根据我们学习的 0-1 背包问题的状态转移推导过程，新来一个数，例如是 nums[i]，根据这个数可能选择也可能不被选择：</p><p>如果不选择 nums[i]，在 [0, i - 1] 这个子区间内已经有一部分元素，使得它们的和为 j ，那么 dp[i][j] = true；<br>如果选择 nums[i]，在 [0, i - 1] 这个子区间内就得找到一部分元素，使得它们的和为 j - nums[i] ，我既然这样写出来了，你就应该知道，这里讨论的前提条件是 nums[i] &lt;= j。</p><p>以上二者成立一条都行。于是得到状态转移方程是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j] or dp[i - <span class="number">1</span>][j - nums[i]], (nums[i] &lt;= j)</span><br></pre></td></tr></table></figure><p>于是按照 0-1 背包问题的模板，我们不难写出以下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canPartition</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        size = len(nums)</span><br><span class="line">        s = sum(nums)</span><br><span class="line">        <span class="keyword">if</span> s &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        target = s // <span class="number">2</span></span><br><span class="line">        dp = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(target+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(target+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[<span class="number">0</span>]==i:</span><br><span class="line">                dp[<span class="number">0</span>][i] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,size):</span><br><span class="line">            n = nums[i]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(target+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j&gt;=n:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] <span class="keyword">or</span> dp[i][j-n]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>优化版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canPartition</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        size = len(nums)</span><br><span class="line">        s = sum(nums)</span><br><span class="line">        <span class="keyword">if</span> s &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        target = s // <span class="number">2</span></span><br><span class="line">        dp = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(target+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(target+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[<span class="number">0</span>]==i:</span><br><span class="line">                dp[i] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,size):</span><br><span class="line">            n = nums[i]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(target, n<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> j&gt;=n:</span><br><span class="line">                    dp[j] = dp[j] <span class="keyword">or</span> dp[j-n]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/partition-equal-subset-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/partition-equal-subset-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;最长公共子序列&quot;&gt;&lt;a href=&quot;#最长公共子序列&quot; class=&quot;headerlink&quot; title=&quot;最长公共子序列&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://sunyunzeng.com/categories/Algorithm/"/>
    
    
      <category term="Dynamic Programming" scheme="http://sunyunzeng.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 300.最长上升子序列</title>
    <link href="http://sunyunzeng.com/LeetCode-300-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://sunyunzeng.com/LeetCode-300-最长上升子序列/</id>
    <published>2019-12-26T02:04:32.000Z</published>
    <updated>2020-01-11T13:36:40.728Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h1><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">10</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>,<span class="number">18</span>]</span><br><span class="line">输出: <span class="number">4</span> </span><br><span class="line">解释: 最长的上升子序列是 [<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>]，它的长度是 <span class="number">4</span>。</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。<br>你算法的时间复杂度应该为 O(n2) 。</p><p><strong>进阶:</strong> 你能将算法的时间复杂度降低到 O(n log n) 吗?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLIS</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(nums)</span><br><span class="line">        <span class="keyword">if</span> l==<span class="number">0</span> <span class="keyword">or</span> l==<span class="number">1</span>: <span class="keyword">return</span> l</span><br><span class="line">        dp = [<span class="number">1</span>]*l</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, l):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):</span><br><span class="line">                <span class="keyword">if</span> nums[i]&gt;nums[j]:</span><br><span class="line">                    dp[i] = max(dp[i], dp[j]+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> max(dp)</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-increasing-subsequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="最长数对链"><a href="#最长数对链" class="headerlink" title="最长数对链"></a>最长数对链</h1><p>给出 n 个数对。 在每一个数对中，第一个数字总是比第二个数字小。</p><p>现在，我们定义一种跟随关系，当且仅当 b &lt; c 时，数对(c, d) 才可以跟在 (a, b) 后面。我们用这种形式来构造一个数对链。</p><p>给定一个对数集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。</p><p>示例 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">2</span>,<span class="number">3</span>], [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: 最长的数对链是 [<span class="number">1</span>,<span class="number">2</span>] -&gt; [<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>给出数对的个数在 [1, 1000] 范围内。</p><p>更上面一题类似，只不要是任意顺序的选择，可以先对列表进行排序，按照数对的第二个数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLongestChain</span><span class="params">(self, pairs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type pairs: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(pairs)</span><br><span class="line">        <span class="keyword">if</span> l==<span class="number">0</span> <span class="keyword">or</span> l==<span class="number">1</span>: <span class="keyword">return</span> l</span><br><span class="line">        pairs = sorted(pairs, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">        dp = [<span class="number">1</span>]*l</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,l):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):</span><br><span class="line">                <span class="keyword">if</span> pairs[i][<span class="number">0</span>]&gt;pairs[j][<span class="number">1</span>]:</span><br><span class="line">                    dp[i] = max(dp[i], dp[j]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> max(dp)</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/maximum-length-of-pair-chain" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-length-of-pair-chain</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="摆动序列"><a href="#摆动序列" class="headerlink" title="摆动序列"></a>摆动序列</h1><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p><p>例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p><p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">输出: <span class="number">6</span> </span><br><span class="line">解释: 整个序列均为摆动序列。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">17</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">16</span>,<span class="number">8</span>]</span><br><span class="line">输出: <span class="number">7</span></span><br><span class="line">解释: 这个序列包含几个长度为 <span class="number">7</span> 摆动序列，其中一个可为[<span class="number">1</span>,<span class="number">17</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">16</span>,<span class="number">8</span>]。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>算法</strong></p><p>首先计算得到差值序列，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>, <span class="number">1</span>] -&gt; [<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>然后去重：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>, <span class="number">1</span>] -&gt; [<span class="number">1</span>, -<span class="number">2</span>]</span><br><span class="line"><span class="comment">// 注意：全零序列的结果为1</span></span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>] -&gt; [<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>动态规划计算，dp[i]保存的是截止位置i的最长摆动序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 判断i位置的元素可以添加到j元素的尾部，构成摆动序列</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSuccess</span><span class="params">(self, nums, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span> &gt; nums[j] <span class="keyword">or</span> nums[i] &lt; <span class="number">0</span> &lt; nums[j]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wiggleMaxLength</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(nums)</span><br><span class="line">        <span class="keyword">if</span> l == <span class="number">0</span> <span class="keyword">or</span> l == <span class="number">1</span>: <span class="keyword">return</span> l</span><br><span class="line">        <span class="keyword">if</span> l == <span class="number">2</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        dp, _nums = [<span class="number">1</span>] * (l - <span class="number">1</span>), [<span class="number">1</span>] * (l - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, l):</span><br><span class="line">            _nums[i - <span class="number">1</span>] = nums[i] - nums[i - <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 差序列去重</span></span><br><span class="line">        nums = list(set(_nums))</span><br><span class="line">        nums.sort(key=_nums.index)</span><br><span class="line">        <span class="comment"># 防止全零序列的干扰</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span> <span class="keyword">and</span> nums[<span class="number">0</span>] == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># 动态规划求解</span></span><br><span class="line">        dp = [<span class="number">1</span>] * len(_nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(_nums)):</span><br><span class="line">            <span class="keyword">if</span> _nums[i] == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):</span><br><span class="line">                <span class="keyword">if</span> self.isSuccess(_nums, i, j):</span><br><span class="line">                    dp[i] = max(dp[i], dp[j] + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> max(dp) + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/wiggle-subsequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/wiggle-subsequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;最长上升子序列&quot;&gt;&lt;a href=&quot;#最长上升子序列&quot; class=&quot;headerlink&quot; title=&quot;最长上升子序列&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://sunyunzeng.com/categories/Algorithm/"/>
    
    
      <category term="Dynamic Programming" scheme="http://sunyunzeng.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 413.等差数列划分</title>
    <link href="http://sunyunzeng.com/Leetcode-413-%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E5%88%92%E5%88%86/"/>
    <id>http://sunyunzeng.com/Leetcode-413-等差数列划分/</id>
    <published>2019-12-25T03:21:09.000Z</published>
    <updated>2020-01-11T13:36:40.758Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="等差数列划分"><a href="#等差数列划分" class="headerlink" title="等差数列划分"></a>等差数列划分</h1><p>如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。</p><p>例如，以下数列为等差数列:</p><p>1, 3, 5, 7, 9<br>7, 7, 7, 7<br>3, -1, -5, -9</p><p>以下数列不是等差数列。</p><p>1, 1, 2, 5, 7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组 A 包含 N 个数，且索引从<span class="number">0</span>开始。数组 A 的一个子数组划分为数组 (P, Q)，P 与 Q 是整数且满足 <span class="number">0</span>&lt;=P&lt;Q&lt;N 。</span><br></pre></td></tr></table></figure><p>如果满足以下条件，则称子数组(P, Q)为等差数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素 A[P], A[p + <span class="number">1</span>], ..., A[Q - <span class="number">1</span>], A[Q] 是等差的。并且 P + <span class="number">1</span> &lt; Q 。</span><br></pre></td></tr></table></figure><p>函数要返回数组 A 中所有为等差数组的子数组个数。</p><p>示例:</p><p>A = [1, 2, 3, 4]</p><p>返回: 3, A 中有三个子等差数组: [1, 2, 3], [2, 3, 4] 以及自身 [1, 2, 3, 4]。</p><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路 + 代码"></a>思路 + 代码</h1><p>首先对于等差序列 B, 其元素数量为n，则其包含的连续自等差序列的总数为 1+2+…+n-2,<br>因此，该题转化为寻找序列中，<strong>最长的连续子等差序列</strong>，然后根据其数量判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(self, A: List[int])</span> -&gt; int:</span></span><br><span class="line">        l = len(A)</span><br><span class="line">        <span class="keyword">if</span> l &lt; <span class="number">3</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        res, count = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,l):</span><br><span class="line">            <span class="keyword">if</span> A[i]-A[i<span class="number">-1</span>] == A[i<span class="number">-1</span>]-A[i<span class="number">-2</span>]:</span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> count!=<span class="number">0</span>:</span><br><span class="line">                    res += sum(range(count+<span class="number">1</span>))</span><br><span class="line">                    count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> count != <span class="number">0</span>:</span><br><span class="line">            res += sum(range(count + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/arithmetic-slices" target="_blank" rel="noopener">https://leetcode-cn.com/problems/arithmetic-slices</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">2</span></span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: <span class="number">2</span> = <span class="number">1</span> + <span class="number">1</span>, <span class="number">1</span> × <span class="number">1</span> = <span class="number">1</span>。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">10</span></span><br><span class="line">输出: <span class="number">36</span></span><br><span class="line">解释: <span class="number">10</span> = <span class="number">3</span> + <span class="number">3</span> + <span class="number">4</span>, <span class="number">3</span> × <span class="number">3</span> × <span class="number">4</span> = <span class="number">36</span>。</span><br></pre></td></tr></table></figure><p>说明: 你可以假设 n 不小于 2 且不大于 58。</p><h1 id="思路-代码-1"><a href="#思路-代码-1" class="headerlink" title="思路 + 代码"></a>思路 + 代码</h1><p>动态规划，整数4的最大乘积为: dp[3] = max(max(dp[2], dp[1]*2), 1 * 2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">integerBreak</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">2</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">1</span>] * (n+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i):</span><br><span class="line">                dp[i] = max(dp[j] * (i - j), dp[i])</span><br><span class="line">                <span class="comment"># 很关键的一步，因为之前的dp[i]最大值可能比dp[i]小，例如2或者3</span></span><br><span class="line">                dp[i] = max(j*(i-j), dp[i])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/integer-break" target="_blank" rel="noopener">https://leetcode-cn.com/problems/integer-break</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="完全平方数"><a href="#完全平方数" class="headerlink" title="完全平方数"></a>完全平方数</h1><p>动态规划， 与前一题类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Math;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">3</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            dp[i] = Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            dp[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>; i&lt;n+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> max_n = (<span class="keyword">int</span>)Math.sqrt(i);</span><br><span class="line">            <span class="keyword">if</span>(max_n*max_n==i)&#123;</span><br><span class="line">                dp[i]=<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=max_n; j++)&#123;</span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[i-j*j]+dp[j*j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSquares</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        dp = [sys.maxsize] * (n + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">            dp[i] = i</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>, n + <span class="number">1</span>):</span><br><span class="line">            max_n = int(math.sqrt(i))</span><br><span class="line">            <span class="keyword">if</span> max_n * max_n == i:</span><br><span class="line">                dp[i] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, max_n + <span class="number">1</span>):</span><br><span class="line">                    dp[i] = min(dp[i], dp[i - j * j] + dp[j*j])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numSquares = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">3</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(<span class="built_in">Number</span>.MAX_VALUE);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++)&#123;</span><br><span class="line">        dp[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">4</span>; i&lt;n+<span class="number">1</span>; i++)&#123;</span><br><span class="line">        max_n = <span class="built_in">Math</span>.trunc(<span class="built_in">Math</span>.sqrt(i));</span><br><span class="line">        <span class="keyword">if</span>(max_n*max_n==i) dp[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>; j&lt;=max_n; j++)&#123;</span><br><span class="line">                dp[i] = <span class="built_in">Math</span>.min(dp[i], dp[i-j*j]+dp[j*j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="解码方法"><a href="#解码方法" class="headerlink" title="解码方法"></a>解码方法</h1><p>一条包含字母 A-Z 的消息通过以下方式进行了编码：</p><p>‘A’ -&gt; 1<br>‘B’ -&gt; 2<br>…<br>‘Z’ -&gt; 26<br>给定一个只包含数字的非空字符串，请计算解码方法的总数。</p><p>示例 1:</p><p>输入: “12”<br>输出: 2<br>解释: 它可以解码为 “AB”（1 2）或者 “L”（12）。<br>示例 2:</p><p>输入: “226”<br>输出: 3<br>解释: 它可以解码为 “BZ” (2 26), “VF” (22 6), 或者 “BBF” (2 2 6) 。</p><p><strong>思路：</strong>动态规划，需注意0的处理，1010的编码方式共有1种，而909编码方式为0种，202编码方式为1种。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numDecodings</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(s)</span><br><span class="line">        <span class="keyword">if</span> l==<span class="number">0</span> <span class="keyword">or</span> s[<span class="number">0</span>]==<span class="string">'0'</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">0</span>]*(l+<span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>], dp[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, l+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> s[i<span class="number">-1</span>]!=<span class="string">'0'</span>:</span><br><span class="line">                dp[i] += dp[i<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="number">9</span>&lt;int(s[i<span class="number">-2</span>:i])&lt;=<span class="number">26</span>:</span><br><span class="line">                dp[i]+=dp[i<span class="number">-2</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/decode-ways" target="_blank" rel="noopener">https://leetcode-cn.com/problems/decode-ways</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;等差数列划分&quot;&gt;&lt;a href=&quot;#等差数列划分&quot; class=&quot;headerlink&quot; title=&quot;等差数列划分&quot;&gt;&lt;/a&gt;等差数
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://sunyunzeng.com/categories/Algorithm/"/>
    
    
      <category term="Dynamic Programming" scheme="http://sunyunzeng.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 打家劫舍 II</title>
    <link href="http://sunyunzeng.com/LeetCode-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%20II%E4%B8%80/"/>
    <id>http://sunyunzeng.com/LeetCode-打家劫舍 II一/</id>
    <published>2019-12-23T08:38:56.000Z</published>
    <updated>2020-01-11T13:36:40.758Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 你不能先偷窃 <span class="number">1</span> 号房屋（金额 = <span class="number">2</span>），然后偷窃 <span class="number">3</span> 号房屋（金额 = <span class="number">2</span>）, 因为他们是相邻的。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line">解释: 你可以先偷窃 <span class="number">1</span> 号房屋（金额 = <span class="number">1</span>），然后偷窃 <span class="number">3</span> 号房屋（金额 = <span class="number">3</span>）。</span><br><span class="line">     偷窃到的最高金额 = <span class="number">1</span> + <span class="number">3</span> = <span class="number">4</span> 。</span><br></pre></td></tr></table></figure><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路 + 代码"></a>思路 + 代码</h1><p>关键是环，可以通过 0<del>len-2, 1</del>len-1分别遍历规避掉环的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subRob</span><span class="params">(self, s, e, nums)</span>-&gt;int:</span></span><br><span class="line">        pre1, pre2, cur = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(s,e):</span><br><span class="line">            cur = max(pre1, pre2+nums[i])</span><br><span class="line">            pre2 = pre1</span><br><span class="line">            pre1 = cur</span><br><span class="line">        <span class="keyword">return</span> cur</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        l = len(nums)</span><br><span class="line">        <span class="keyword">if</span> l==<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> l==<span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> l==<span class="number">2</span>: <span class="keyword">return</span> max(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> max(self.subRob(<span class="number">0</span>, l<span class="number">-1</span>, nums), self.subRob(<span class="number">1</span>, l, nums))</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/house-robber-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/house-robber-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;你是一个专
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://sunyunzeng.com/categories/Algorithm/"/>
    
    
      <category term="Dynamic Programming" scheme="http://sunyunzeng.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Vue + Express + MySQL驾驶行为分析全栈项目(六): ECharts实现轨迹动态可视化</title>
    <link href="http://sunyunzeng.com/Vue-Express-MySQL%E9%A9%BE%E9%A9%B6%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE-%E5%85%AD-ECharts%E5%AE%9E%E7%8E%B0%E8%BD%A8%E8%BF%B9%E5%8A%A8%E6%80%81%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://sunyunzeng.com/Vue-Express-MySQL驾驶行为分析全栈项目-六-ECharts实现轨迹动态可视化/</id>
    <published>2019-12-23T05:46:46.000Z</published>
    <updated>2020-01-11T13:36:40.828Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>自己做了一点点的小尝试：基于前馈神经网络 LSTM 的个体出行目的地预测模型，基于个体历史出行数据，模型可以实现出行目的地的实时动态预测功能。</p><p>模型其实具有实际应用功能，为了对其应用场景进行探索，拟开发一个全栈的项目，在Web客户端实现用户出行的动态预测效果，同时能够提供数据可视分析等功能。</p><p><strong><a href="https://github.com/SUNYunZeng/AIforDriving" target="_blank" rel="noopener">项目地址</a></strong></p><p><strong><a href="http://geoai.sunyunzeng.com/" target="_blank" rel="noopener">可视化效果</a></strong></p><p>轨迹的动态可视化预期效果可以参考: <a href="https://www.echartsjs.com/examples/zh/editor.html?c=lines-bmap-effect" target="_blank" rel="noopener">https://www.echartsjs.com/examples/zh/editor.html?c=lines-bmap-effect</a></p><h1 id="ECharts准备"><a href="#ECharts准备" class="headerlink" title="ECharts准备"></a>ECharts准备</h1><p>首先安装EChart组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure><p>然后在 Vue 的 <strong>main.js</strong> 文件中引入百度地图依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/extension/bmap/bmap'</span>);</span><br></pre></td></tr></table></figure><h1 id="封装百度地图轨迹可视化模块"><a href="#封装百度地图轨迹可视化模块" class="headerlink" title="封装百度地图轨迹可视化模块"></a>封装百度地图轨迹可视化模块</h1><p>我们将百度地图轨迹可视化单独包装成一个模块 EChartsMap.vue，该模块作用是接收父模块传来的可视化数据及设置参数，实现对应的可视化效果。</p><p>首先创建界面模版：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bmap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.bmap</span>&#123;</span></span><br><span class="line"><span class="undefined">  width: 100%;</span></span><br><span class="line"><span class="undefined">  height: calc(78vh);</span></span><br><span class="line"><span class="undefined">  position: relative;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 script 标签中引入逻辑代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span>;</span><br><span class="line"><span class="comment">// 引入ECharts组件</span></span><br><span class="line"> <span class="keyword">let</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts'</span>);</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   name: <span class="string">'EChartsMap'</span>,</span><br><span class="line">   props: [<span class="string">'option'</span>],</span><br><span class="line">   watch:&#123;</span><br><span class="line">     option: <span class="function"><span class="keyword">function</span> (<span class="params">option</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.myChart.setOption(option);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   data()&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       myChart: <span class="literal">null</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   mounted()&#123;</span><br><span class="line">     <span class="keyword">this</span>.draw();</span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">     draw () &#123;</span><br><span class="line">       <span class="keyword">this</span>.myChart = echarts.init(<span class="keyword">this</span>.$el);</span><br><span class="line">       <span class="keyword">this</span>.myChart.setOption(&#123;</span><br><span class="line">         bmap:&#123;</span><br><span class="line">           center: [<span class="number">114.03</span>, <span class="number">22.32</span>],</span><br><span class="line">           zoom: <span class="number">10</span>,</span><br><span class="line">           roam: <span class="literal">true</span>,</span><br><span class="line">           mapStyle: store.state.mapStyle</span><br><span class="line">         &#125;&#125;);</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>这样子，我们父组件通过子组件的 option 属性进行 ECharts 可视化的配置。</p><p>然后子模块通过设置watch监听，实现可视化效果的随父模块数据的动态更新。</p><p>我们的ECharts需要在模版渲染成HTML界面后引入，所以在 <strong>mounted()</strong> 函数中使用。</p><h1 id="轨迹动态可视化"><a href="#轨迹动态可视化" class="headerlink" title="轨迹动态可视化"></a>轨迹动态可视化</h1><p>首先我们通过样例：<a href="https://www.echartsjs.com/examples/zh/editor.html?c=lines-bmap-effect" target="_blank" rel="noopener">https://www.echartsjs.com/examples/zh/editor.html?c=lines-bmap-effect</a> 知道轨迹动态可视化的数据组织形式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">    busLines = [&#123;<span class="attr">coords</span>: [[<span class="number">114</span>,<span class="number">25</span>],[<span class="number">115</span>,<span class="number">26</span>], [<span class="number">117</span>,<span class="number">28</span>]...[lng, lat]],</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">                normal: &#123;</span><br><span class="line">                    color: echarts.color.modifyHSL(<span class="string">'#5A94DF'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">114</span>,<span class="number">25</span>],[<span class="number">115</span>,<span class="number">26</span>], [<span class="number">117</span>,<span class="number">28</span>]...[lng, lat]],</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">                normal: &#123;</span><br><span class="line">                    color: echarts.color.modifyHSL(<span class="string">'#5A94DF'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;&#125;]</span><br><span class="line">    myChart.setOption(option = &#123;</span><br><span class="line">        <span class="comment">// 百度底图设置</span></span><br><span class="line">        bmap: &#123;</span><br><span class="line">            center: [<span class="number">116.46</span>, <span class="number">39.92</span>],</span><br><span class="line">            zoom: <span class="number">10</span>,</span><br><span class="line">            roam: <span class="literal">true</span>,</span><br><span class="line">            mapStyle: &#123;</span><br><span class="line">              <span class="string">'styleJson'</span>: [</span><br><span class="line">                ...]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">            <span class="comment">// 基础线条设置</span></span><br><span class="line">            &#123;</span><br><span class="line">            type: <span class="string">'lines'</span>,</span><br><span class="line">            coordinateSystem: <span class="string">'bmap'</span>,</span><br><span class="line">            polyline: <span class="literal">true</span>,</span><br><span class="line">            data: busLines,</span><br><span class="line">            silent: <span class="literal">true</span>,</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">                normal: &#123;</span><br><span class="line">                    opacity: <span class="number">0.2</span>,</span><br><span class="line">                    width: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            progressiveThreshold: <span class="number">500</span>,</span><br><span class="line">            progressive: <span class="number">200</span></span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="comment">// 线上动态点效果设置</span></span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">'lines'</span>,</span><br><span class="line">            coordinateSystem: <span class="string">'bmap'</span>,</span><br><span class="line">            polyline: <span class="literal">true</span>,</span><br><span class="line">            data: busLines,</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">                normal: &#123;</span><br><span class="line">                    width: <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            effect: &#123;</span><br><span class="line">                constantSpeed: <span class="number">20</span>,</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                trailLength: <span class="number">0.1</span>,</span><br><span class="line">                symbolSize: <span class="number">1.5</span></span><br><span class="line">            &#125;,</span><br><span class="line">            zlevel: <span class="number">1</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过数据分析发现，我们的轨迹数据只要组织成 busLines (其中设定了轨迹点序列、及轨迹颜色)，然后在ECharts 底图设定 <strong>bmap</strong> 及数据设定 <strong>series</strong> 里面将 <strong>基础线条设置</strong> 与 <strong>线上动态点效果设置</strong> 按照自己喜欢的样式设计好即可。</p><p>然后在父模块中先引入EChartMap.vue模块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"handleSubmit"</span>&gt;</span>展示<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EChartsMap</span> <span class="attr">:option</span>=<span class="string">"option"</span>&gt;</span><span class="tag">&lt;/<span class="name">EChartsMap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> EChartsMap <span class="keyword">from</span> <span class="string">'@/components/commom/EChartsMap'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'prediction'</span>,</span></span><br><span class="line"><span class="undefined">    data () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">        bmap: &#123;</span></span><br><span class="line"><span class="javascript">          center: <span class="keyword">this</span>.$store.state.mapconfig.center,</span></span><br><span class="line"><span class="undefined">          boundingCoords: [],</span></span><br><span class="line"><span class="undefined">          zoom: 15,</span></span><br><span class="line"><span class="javascript">          roam: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">          mapStyle: store.state.mapStyle</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        option: &#123;</span></span><br><span class="line"><span class="javascript">          bmap: <span class="keyword">this</span>.bmap,</span></span><br><span class="line"><span class="undefined">          tooltip: &#123;</span></span><br><span class="line"><span class="javascript">            trigger: <span class="string">'item'</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          series: []</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        myChart: <span class="literal">null</span>,</span></span><br><span class="line"><span class="undefined">        lines: &#123;</span></span><br><span class="line"><span class="undefined">          coords: [],</span></span><br><span class="line"><span class="undefined">          lineStyle: &#123;</span></span><br><span class="line"><span class="undefined">            normal: &#123;</span></span><br><span class="line"><span class="javascript">              color: <span class="string">'orange'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        lines_option: &#123;</span></span><br><span class="line"><span class="javascript">          type: <span class="string">'lines'</span>,</span></span><br><span class="line"><span class="javascript">          coordinateSystem: <span class="string">'bmap'</span>,</span></span><br><span class="line"><span class="javascript">          polyline: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">          data: [],</span></span><br><span class="line"><span class="javascript">          silent: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">          lineStyle: &#123;</span></span><br><span class="line"><span class="undefined">            normal: &#123;</span></span><br><span class="line"><span class="undefined">              opacity: 0.75,</span></span><br><span class="line"><span class="undefined">              width: 3</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          progressiveThreshold: 500,</span></span><br><span class="line"><span class="undefined">          progressive: 200</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        lines_state: &#123;</span></span><br><span class="line"><span class="javascript">          type: <span class="string">'lines'</span>,</span></span><br><span class="line"><span class="javascript">          coordinateSystem: <span class="string">'bmap'</span>,</span></span><br><span class="line"><span class="javascript">          polyline: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">          data: [],</span></span><br><span class="line"><span class="undefined">          lineStyle: &#123;</span></span><br><span class="line"><span class="undefined">            normal: &#123;</span></span><br><span class="line"><span class="undefined">              width: 0</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          effect: &#123;</span></span><br><span class="line"><span class="undefined">            constantSpeed: 40,</span></span><br><span class="line"><span class="javascript">            show: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">            trailLength: 0.3,</span></span><br><span class="line"><span class="undefined">            symbolSize: 3.5</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          zlevel: 1</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    mounted () &#123;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 异步数据处理</span></span></span><br><span class="line"><span class="undefined">        handleSubmit () &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$axios.post().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">                draw(data);</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 数据可视化函数</span></span></span><br><span class="line"><span class="undefined">        draw (trajectory) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.lines.coords = trajectory;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.lines_option.data = [<span class="keyword">this</span>.lines];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.lines_state.data = [<span class="keyword">this</span>.lines];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> series = [<span class="keyword">this</span>.lines_option, <span class="keyword">this</span>.lines_state];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.option = &#123;</span></span><br><span class="line"><span class="javascript">          bmap: <span class="keyword">this</span>.bmap,</span></span><br><span class="line"><span class="undefined">          tooltip: &#123;</span></span><br><span class="line"><span class="javascript">            trigger: <span class="string">'item'</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          series: series</span></span><br><span class="line"><span class="undefined">        &#125;;;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      EChartsMap</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码请查看：<a href="https://github.com/SUNYunZeng/AIforDriving/blob/master/src/views/Prediction.vue" target="_blank" rel="noopener">https://github.com/SUNYunZeng/AIforDriving/blob/master/src/views/Prediction.vue</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;自己做了一
      
    
    </summary>
    
      <category term="教程" scheme="http://sunyunzeng.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Vue" scheme="http://sunyunzeng.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 524.通过删除字母匹配到字典里最长单词</title>
    <link href="http://sunyunzeng.com/LeetCode-524-%E9%80%9A%E8%BF%87%E5%88%A0%E9%99%A4%E5%AD%97%E6%AF%8D%E5%8C%B9%E9%85%8D%E5%88%B0%E5%AD%97%E5%85%B8%E9%87%8C%E6%9C%80%E9%95%BF%E5%8D%95%E8%AF%8D/"/>
    <id>http://sunyunzeng.com/LeetCode-524-通过删除字母匹配到字典里最长单词/</id>
    <published>2019-12-21T03:49:45.000Z</published>
    <updated>2020-01-11T13:36:40.732Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且字典顺序最小的字符串。如果答案不存在，则返回空字符串。</p><p><strong>示例 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = <span class="string">"abpcplea"</span>, d = [<span class="string">"ale"</span>,<span class="string">"apple"</span>,<span class="string">"monkey"</span>,<span class="string">"plea"</span>]</span><br><span class="line"></span><br><span class="line">输出: </span><br><span class="line"><span class="string">"apple"</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">s = <span class="string">"abpcplea"</span>, d = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line"></span><br><span class="line">输出: </span><br><span class="line"><span class="string">"a"</span></span><br></pre></td></tr></table></figure><p>说明:<br>所有输入的字符串只包含小写字母。<br>字典的大小不会超过 1000。<br>所有输入的字符串长度不会超过 1000。</p><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路 + 代码"></a>思路 + 代码</h1><p>快慢指针判断是否在字符串里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isInWord</span><span class="params">(self, a, b)</span> -&gt; bool:</span></span><br><span class="line">        i, j = <span class="number">0</span>, len(b)<span class="number">-1</span></span><br><span class="line">        m, n = <span class="number">0</span>, len(a)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            <span class="keyword">if</span> m &gt; n: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> a[m]==b[i]:</span><br><span class="line">                m+=<span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> m&lt;=n <span class="keyword">and</span> a[m]!=b[i]:</span><br><span class="line">                    m+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> m &gt; n <span class="keyword">and</span> i&lt;=j: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> a[n]==b[j]:</span><br><span class="line">                n-=<span class="number">1</span></span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> m&lt;=n <span class="keyword">and</span> a[n]!=b[j]:</span><br><span class="line">                    n-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> m &gt; n <span class="keyword">and</span> i&lt;=j: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLongestWord</span><span class="params">(self, s: str, d: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> len(s)==<span class="number">0</span> <span class="keyword">or</span> len(d)==<span class="number">0</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        res=<span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(d)):</span><br><span class="line">            <span class="keyword">if</span> self.isInWord(s, d[i]):</span><br><span class="line">                <span class="keyword">if</span> len(d[i])&gt;len(res):</span><br><span class="line">                    res = d[i]</span><br><span class="line">                <span class="keyword">elif</span> len(d[i])==len(res) <span class="keyword">and</span> d[i]&lt;res:</span><br><span class="line">                    res = d[i]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给定一个字
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://sunyunzeng.com/categories/Algorithm/"/>
    
    
      <category term="Other Algorithm" scheme="http://sunyunzeng.com/tags/Other-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 763. 划分字母区间</title>
    <link href="http://sunyunzeng.com/LeetCode-763-%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4/"/>
    <id>http://sunyunzeng.com/LeetCode-763-划分字母区间/</id>
    <published>2019-12-20T11:56:57.000Z</published>
    <updated>2020-01-11T13:36:40.758Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段。返回一个表示每个字符串片段的长度的列表。</p><p><strong>示例1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: S = <span class="string">"ababcbacadefegdehijhklij"</span></span><br><span class="line">输出: [<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">解释:</span><br><span class="line">划分结果为 <span class="string">"ababcbaca"</span>, <span class="string">"defegde"</span>, <span class="string">"hijhklij"</span>。</span><br><span class="line">每个字母最多出现在一个片段中。</span><br><span class="line">像 <span class="string">"ababcbacadefegde"</span>, <span class="string">"hijhklij"</span> 的划分是错误的，因为划分的片段数较少。</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S的长度在[<span class="number">1</span>, <span class="number">500</span>]之间。</span><br><span class="line">S只包含小写字母<span class="string">'a'</span>到<span class="string">'z'</span>。</span><br></pre></td></tr></table></figure><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路 + 代码"></a>思路 + 代码</h1><p>贪心算法。</p><p>统计每个字母出现的最后位置，最优分割是该区间内任意一个字母的最大位置都包括在内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partitionLabels</span><span class="params">(self, S: str)</span> -&gt; List[int]:</span></span><br><span class="line">        dic = &#123;c:i <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(S)&#125;</span><br><span class="line">        j, anchor = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(S):</span><br><span class="line">            j = max(j, dic[c])</span><br><span class="line">            <span class="keyword">if</span> i==j:</span><br><span class="line">                res.append(i-anchor+<span class="number">1</span>)</span><br><span class="line">                anchor = i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;字符串 S
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://sunyunzeng.com/categories/Algorithm/"/>
    
    
      <category term="Greedy Algorithm" scheme="http://sunyunzeng.com/tags/Greedy-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Vue + Express + MySQL驾驶行为分析全栈项目(五): Leftlet热力图实现</title>
    <link href="http://sunyunzeng.com/Vue-Express-MySQL%E9%A9%BE%E9%A9%B6%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE-%E4%BA%94-Leftlet%E7%83%AD%E5%8A%9B%E5%9B%BE%E5%AE%9E%E7%8E%B0/"/>
    <id>http://sunyunzeng.com/Vue-Express-MySQL驾驶行为分析全栈项目-五-Leftlet热力图实现/</id>
    <published>2019-12-14T09:13:58.000Z</published>
    <updated>2020-01-11T13:36:40.828Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>自己做了一点点的小尝试：基于前馈神经网络 LSTM 的个体出行目的地预测模型，基于个体历史出行数据，模型可以实现出行目的地的实时动态预测功能。</p><p>模型其实具有实际应用功能，为了对其应用场景进行探索，拟开发一个全栈的项目，在Web客户端实现用户出行的动态预测效果，同时能够提供数据可视分析等功能。</p><p><strong><a href="https://github.com/SUNYunZeng/AIforDriving" target="_blank" rel="noopener">项目地址</a></strong></p><p><strong><a href="http://geoai.sunyunzeng.com/" target="_blank" rel="noopener">可视化效果</a></strong></p><h1 id="Leftlet底图模块构建"><a href="#Leftlet底图模块构建" class="headerlink" title="Leftlet底图模块构建"></a>Leftlet底图模块构建</h1><p>需要安装的依赖库与样式查看<a href="http://sunyunzeng.com/Vue-Express-MySQL%E9%A9%BE%E9%A9%B6%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE-%E5%9B%9B-Leftlet%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%9B%BE%E5%B1%82%E5%8A%A0%E8%BD%BD%E5%8A%9F%E8%83%BD/">Vue + Express + MySQL驾驶行为分析全栈项目(四): Leftlet组件与图层加载功能</a>。</p><p>在 src/components/common 文件夹下添加 LeftletMap.vue文件，作为Leftlet地图的基础模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LeftletMap.vue</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"map"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'LeftletMap'</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        L: <span class="literal">null</span>,</span><br><span class="line">        map: <span class="literal">null</span>,</span><br><span class="line">        map_config: <span class="keyword">this</span>.store.state.map_config</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      initMap () &#123;</span><br><span class="line">        <span class="keyword">this</span>.L = L;</span><br><span class="line">        <span class="keyword">let</span> map = L.map(<span class="keyword">this</span>.$el, &#123;</span><br><span class="line">          center: <span class="keyword">this</span>.map_config.center,</span><br><span class="line">          zoom: <span class="keyword">this</span>.map_config.zoom</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">        <span class="keyword">let</span> baseLayer = L.tileLayer(<span class="string">'https://api.tiles.mapbox.com/v4/&#123;id&#125;/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png?'</span> +</span><br><span class="line">          <span class="string">'access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            id: <span class="keyword">this</span>.store.state.layerItems[<span class="string">'box_d'</span>],</span><br><span class="line">            minZoom: <span class="number">3</span></span><br><span class="line">          &#125;);</span><br><span class="line">        map.addLayer(baseLayer);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      <span class="keyword">this</span>.initMap();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .map &#123;</span></span><br><span class="line"><span class="regexp">    width: 100%;</span></span><br><span class="line"><span class="regexp">    height: calc(88vh);</span></span><br><span class="line"><span class="regexp">    position: relative;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>其中 this.state 是用Vuex插件定义的全局状态变量，其本身是 src/store/index.js文件中定义的一个对象，在其中我们定义了各种地图的配置选项。具体内容可查看<a href="http://sunyunzeng.com/Vue-Express-MySQL%E9%A9%BE%E9%A9%B6%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE-%E5%9B%9B-Leftlet%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%9B%BE%E5%B1%82%E5%8A%A0%E8%BD%BD%E5%8A%9F%E8%83%BD/">Vue + Express + MySQL驾驶行为分析全栈项目(四): Leftlet组件与图层加载功能</a>。</p><h1 id="热力图实现"><a href="#热力图实现" class="headerlink" title="热力图实现"></a>热力图实现</h1><p>首先安装leftlet热力图插件 leaflet-heatmap。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i leaflet-heatmap --save</span><br></pre></td></tr></table></figure><p>然后在src/views/ 文件夹下创建 ODpoint.vue 文件，该组件是对轨迹的O-D(Origin-Destination)点进行热力图分析。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ODpoint.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Form</span> <span class="attr">ref</span>=<span class="string">"formInline"</span> <span class="attr">inline</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">FormItem</span>&gt;</span></span><br><span class="line">        测试用户: <span class="tag">&lt;<span class="name">Select</span> <span class="attr">v-model</span>=<span class="string">"user"</span> <span class="attr">clearable</span> <span class="attr">style</span>=<span class="string">"width:70px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">"user1"</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">"user2"</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">"user3"</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">"user4"</span>&gt;</span>User4<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">FormItem</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>出发时间:<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">FormItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DatePicker</span> <span class="attr">v-model</span>=<span class="string">"time_range"</span> <span class="attr">:start-date</span>=<span class="string">"new Date('2018-01-01 00:00:00')"</span> <span class="attr">type</span>=<span class="string">"datetimerange"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"width: 300px"</span>&gt;</span><span class="tag">&lt;/<span class="name">DatePicker</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">FormItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CheckboxGroup</span> <span class="attr">v-model</span>=<span class="string">"ODSelectoin"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">label</span>=<span class="string">"origin"</span>&gt;</span><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">label</span>=<span class="string">"destination"</span>&gt;</span><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">CheckboxGroup</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">FormItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span>展示<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Map</span> <span class="attr">style</span>=<span class="string">"height: calc(78vh);"</span> <span class="attr">ref</span>=<span class="string">"leftletMap"</span>&gt;</span><span class="tag">&lt;/<span class="name">Map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后定义展示的逻辑js代码。一些问题可以参考文章：<a href="https://blog.frytea.com/archives/41/。" target="_blank" rel="noopener">https://blog.frytea.com/archives/41/。</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入LeftletMap子模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">'@/components/commom/LeftletMap'</span>;</span><br><span class="line"><span class="keyword">import</span> HeatmapOverlay <span class="keyword">from</span> <span class="string">'heatmap.js/plugins/leaflet-heatmap'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;post, <span class="keyword">get</span>&#125; from '@/utils/myAjax';</span><br><span class="line">import &#123;points_factory&#125; <span class="keyword">from</span>  <span class="string">'@/utils/traj-handler'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'od'</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      user: <span class="string">'user1'</span>,</span><br><span class="line">      time_range: [<span class="string">'2018-01-01 00:00:00'</span>, <span class="string">'2018-01-31:00:00:00'</span>],</span><br><span class="line">      ODSelectoin: [<span class="string">'origin'</span>],</span><br><span class="line">      heatmapLayer: <span class="literal">null</span>,</span><br><span class="line">      cfg: &#123;</span><br><span class="line">        <span class="string">'radius'</span>: <span class="number">0.005</span>,</span><br><span class="line">        <span class="string">'maxOpacity'</span>: <span class="number">0.8</span>,</span><br><span class="line">        <span class="string">'scaleRadius'</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">'useLocalExtrema'</span>: <span class="literal">true</span>,</span><br><span class="line">        latField: <span class="string">'lat'</span>,</span><br><span class="line">        lngField: <span class="string">'lng'</span>,</span><br><span class="line">        valueField: <span class="string">'eff'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.initHeatMap();</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="built_in">Map</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show () &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.ODSelectoin.length === <span class="number">0</span> || <span class="keyword">this</span>.user === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$Message.info(<span class="string">'请配置参数'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.$isOnServer) &#123;</span><br><span class="line">        post(<span class="string">'searchByRow'</span>, &#123;</span><br><span class="line">          rowName: [<span class="string">'origin'</span>, <span class="string">'destination'</span>, <span class="string">'norm_dict'</span>, <span class="string">'o_eff'</span>, <span class="string">'d_eff'</span>],</span><br><span class="line">          time: <span class="keyword">this</span>.time_range,</span><br><span class="line">          tableName: <span class="keyword">this</span>.user</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (data.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> res = points_factory(data, <span class="keyword">this</span>.ODSelectoin);</span><br><span class="line">            <span class="keyword">this</span>.heatmapLayer.setData(res.data);</span><br><span class="line">            <span class="keyword">this</span>.$refs.leftletMap.map.setView(res.center, <span class="number">10</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.$Message.info(<span class="string">'空数据'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">get</span>('../static/data/' + this.user + '.json').then(data =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (data.RECORDS.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> basket = [];</span><br><span class="line">            <span class="keyword">let</span> record = data.RECORDS;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> record) &#123;</span><br><span class="line">              <span class="keyword">let</span> tmp_date = <span class="keyword">new</span> <span class="built_in">Date</span>(item[<span class="string">'time'</span>]);</span><br><span class="line">              <span class="keyword">if</span> (tmp_date &gt;= <span class="keyword">this</span>.time_range[<span class="number">0</span>] &amp;&amp; tmp_date &lt;= <span class="keyword">this</span>.time_range[<span class="number">1</span>]) &#123;</span><br><span class="line">                basket.push(item);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> res = points_factory(basket, <span class="keyword">this</span>.ODSelectoin);</span><br><span class="line">            <span class="keyword">this</span>.heatmapLayer.setData(res.data);</span><br><span class="line">            <span class="keyword">this</span>.$refs.leftletMap.map.setView(res.center, <span class="number">10</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.$Message.info(<span class="string">'空数据'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    initHeatMap () &#123;</span><br><span class="line">      <span class="keyword">this</span>.heatmapLayer = <span class="keyword">new</span> HeatmapOverlay(<span class="keyword">this</span>.cfg);</span><br><span class="line">      <span class="keyword">this</span>.heatmapLayer.addTo(<span class="keyword">this</span>.$refs.leftletMap.map);</span><br><span class="line">      L.control.scale(&#123; <span class="attr">maxWidth</span>: <span class="number">200</span>, <span class="attr">metric</span>: <span class="literal">true</span>, <span class="attr">imperial</span>: <span class="literal">false</span> &#125;).addTo(<span class="keyword">this</span>.$refs.leftletMap.map);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>最后，预览效果：<a href="http://geoai.sunyunzeng.com/#/od" target="_blank" rel="noopener">http://geoai.sunyunzeng.com/#/od</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;自己做了一
      
    
    </summary>
    
      <category term="教程" scheme="http://sunyunzeng.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Vue" scheme="http://sunyunzeng.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue + Express + MySQL驾驶行为分析全栈项目(四): Leftlet组件与图层加载功能</title>
    <link href="http://sunyunzeng.com/Vue-Express-MySQL%E9%A9%BE%E9%A9%B6%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE-%E5%9B%9B-Leftlet%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%9B%BE%E5%B1%82%E5%8A%A0%E8%BD%BD%E5%8A%9F%E8%83%BD/"/>
    <id>http://sunyunzeng.com/Vue-Express-MySQL驾驶行为分析全栈项目-四-Leftlet组件与图层加载功能/</id>
    <published>2019-12-14T08:45:07.000Z</published>
    <updated>2020-01-11T13:36:40.838Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>自己做了一点点的小尝试：基于前馈神经网络 LSTM 的个体出行目的地预测模型，基于个体历史出行数据，模型可以实现出行目的地的实时动态预测功能。</p><p>模型其实具有实际应用功能，为了对其应用场景进行探索，拟开发一个全栈的项目，在Web客户端实现用户出行的动态预测效果，同时能够提供数据可视分析等功能。</p><p><strong><a href="https://github.com/SUNYunZeng/AIforDriving" target="_blank" rel="noopener">项目地址</a></strong></p><p><strong><a href="http://geoai.sunyunzeng.com/" target="_blank" rel="noopener">可视化效果</a></strong></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>首先下载安装 leftlet。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install leaflet --save</span><br></pre></td></tr></table></figure><ol start="2"><li>然后在全局入口 main.js 文件中引入leftlet，包括样式文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入插件与样式</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> L <span class="keyword">from</span> <span class="string">'leaflet'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'leaflet/dist/leaflet.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line">Vue.L = Vue.prototype.$L = L;</span><br></pre></td></tr></table></figure><ol start="3"><li>安装leftlet地图图层的加载插件– leaflet.chinatmsproviders</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i leaflet.chinatmsproviders --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Provider <span class="keyword">from</span> <span class="string">'leaflet.chinatmsproviders'</span>;</span><br><span class="line"></span><br><span class="line">Vue.Provider = Vue.prototype.$Provider = Provider;</span><br></pre></td></tr></table></figure><p>然后引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i leaflet.chinatmsproviders</span><br></pre></td></tr></table></figure><ol start="5"><li>再安装iView插件。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install iview --save</span><br></pre></td></tr></table></figure><p>然后在全局入口 main.js 文件中引入iview插件及样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> iView <span class="keyword">from</span> <span class="string">'iview'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(iView);</span><br></pre></td></tr></table></figure><ol start="6"><li>main.js文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'@/App'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span>;</span><br><span class="line"><span class="keyword">import</span> iView <span class="keyword">from</span> <span class="string">'iview'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'leaflet/dist/leaflet.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'iview/dist/styles/iview.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/permission'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> L <span class="keyword">from</span> <span class="string">'leaflet'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Provider <span class="keyword">from</span> <span class="string">'leaflet.chinatmsproviders'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line">Vue.use(iView);</span><br><span class="line">Vue.L = Vue.prototype.$L = L;</span><br><span class="line">Vue.Provider = Vue.prototype.$Provider = Provider;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App) <span class="comment">// 相当于 components: &#123; App &#125;  vue1.0的写法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="界面展示逻辑"><a href="#界面展示逻辑" class="headerlink" title="界面展示逻辑"></a>界面展示逻辑</h1><p>然后定义我们的页面展示逻辑。</p><p>首先在 src/views/ 文件夹下创建 Home.vue 文件。然后定义界面组件，包括返回home按钮与下拉图层选择选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Home.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>  <span class="attr">id</span>=<span class="string">"map_home"</span> <span class="attr">class</span>=<span class="string">"rightmenu"</span> @<span class="attr">click</span>=<span class="string">"returnHome"</span>  <span class="attr">icon</span>=<span class="string">"ios-home"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">shape</span>=<span class="string">"circle"</span> <span class="attr">title</span>=<span class="string">"home"</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Dropdown</span> <span class="attr">class</span>=<span class="string">"rightmenu"</span> <span class="attr">style</span>=<span class="string">"margin-left: 20px"</span> <span class="attr">placement</span>=<span class="string">"bottom-end"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DropdownMenu</span> <span class="attr">slot</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DropdownItem</span> @<span class="attr">click.native</span>=<span class="string">"mapSet('gd')"</span>&gt;</span>高德地图<span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DropdownItem</span> @<span class="attr">click.native</span>=<span class="string">"mapSet('glg')"</span>&gt;</span>谷歌地图<span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DropdownItem</span> @<span class="attr">click.native</span>=<span class="string">"mapSet('box')"</span>&gt;</span>MapBox<span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DropdownItem</span> @<span class="attr">click.native</span>=<span class="string">"mapSet('osm')"</span>&gt;</span>OSM地图<span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DropdownItem</span> @<span class="attr">click.native</span>=<span class="string">"mapSet('geo')"</span>&gt;</span>智图<span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">DropdownMenu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Dropdown</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#map</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    height: calc(88vh);</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.rightmenu</span>&#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 30px;</span></span><br><span class="line"><span class="undefined">    right: 70px;</span></span><br><span class="line"><span class="undefined">    z-index: 1000;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#map_home</span>&#123;</span></span><br><span class="line"><span class="undefined">    right: 30px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="功能实现逻辑"><a href="#功能实现逻辑" class="headerlink" title="功能实现逻辑"></a>功能实现逻辑</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.vue </span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        map: <span class="literal">null</span>,</span><br><span class="line">        L: <span class="literal">null</span>,</span><br><span class="line">        baseLayer: <span class="literal">null</span>,</span><br><span class="line">        msg: <span class="string">'高德地图'</span>,</span><br><span class="line">        map_config: &#123;</span><br><span class="line">          zoom: <span class="number">15</span>,</span><br><span class="line">          center: [<span class="number">30.541093</span>, <span class="number">114.360734</span>],</span><br><span class="line">          minZoom: <span class="number">2</span>,</span><br><span class="line">          maxZoom: <span class="number">18</span></span><br><span class="line">          <span class="comment">// key: "eb35dddb3aa33c7a8fb4218b39d1e424"  天地图key</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      <span class="keyword">this</span>.initMap();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      initMap () &#123;</span><br><span class="line">        <span class="keyword">this</span>.L = L;</span><br><span class="line">        <span class="keyword">let</span> map = L.map(<span class="string">"map"</span>, &#123;</span><br><span class="line">          center: <span class="keyword">this</span>.map_config.center,</span><br><span class="line">          zoom: <span class="keyword">this</span>.map_config.zoom</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">        <span class="keyword">this</span>.addLayer(L, map, store.state.layerItems[<span class="string">'gd_n_a'</span>],<span class="number">18</span>, <span class="number">3</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      addLayer (L, map, layer_name, maxZoom, minZoom) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.baseLayer !== <span class="literal">null</span>) &#123;</span><br><span class="line">          map.removeLayer(<span class="keyword">this</span>.baseLayer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.baseLayer = L.tileLayer.chinaProvider(layer_name, &#123;</span><br><span class="line">          maxZoom: maxZoom === <span class="literal">undefined</span> ? <span class="keyword">this</span>.map_config.maxZoom : maxZoom,</span><br><span class="line">          minZoom: minZoom === <span class="literal">undefined</span> ? <span class="keyword">this</span>.map_config.minZoom : minZoom</span><br><span class="line">        &#125;);</span><br><span class="line">        map.addLayer(<span class="keyword">this</span>.baseLayer);</span><br><span class="line">      &#125;,</span><br><span class="line">      returnHome () &#123;</span><br><span class="line">        <span class="keyword">this</span>.map.setView(<span class="keyword">this</span>.map_config.center, <span class="number">15</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      mapSet (map_name, L = <span class="keyword">this</span>.L, map = <span class="keyword">this</span>.map) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (map_name) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'gd'</span>:</span><br><span class="line">            <span class="keyword">this</span>.addLayer(L, map, store.state.layerItems[<span class="string">'gd_n_a'</span>], <span class="number">18</span>, <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">this</span>.msg = <span class="string">'高德地图 '</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'glg'</span>:</span><br><span class="line">            <span class="keyword">this</span>.addLayer(L, map, store.state.layerItems[<span class="string">'glg_n'</span>]);</span><br><span class="line">            <span class="keyword">this</span>.msg = <span class="string">'谷歌地图 '</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'geo'</span>:</span><br><span class="line">            <span class="keyword">this</span>.addLayer(L, map, store.state.layerItems[<span class="string">'geo_n_g'</span>], <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">this</span>.msg = <span class="string">'   智图   '</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'osm'</span>:</span><br><span class="line">            <span class="keyword">this</span>.addLayer(L, map, store.state.layerItems[<span class="string">'osm'</span>]);</span><br><span class="line">            <span class="keyword">this</span>.msg = <span class="string">'OSM地图'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'box'</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.baseLayer !== <span class="literal">null</span>) &#123;</span><br><span class="line">              map.removeLayer(<span class="keyword">this</span>.baseLayer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.baseLayer = L.tileLayer(<span class="string">'https://api.tiles.mapbox.com/v4/&#123;id&#125;/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png?'</span> +</span><br><span class="line">              <span class="string">'access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw'</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                id: store.state.layerItems[<span class="string">'box'</span>],</span><br><span class="line">                minZoom: <span class="number">3</span></span><br><span class="line">              &#125;);</span><br><span class="line">            map.addLayer(<span class="keyword">this</span>.baseLayer);</span><br><span class="line">            <span class="keyword">this</span>.msg = <span class="string">'Mapbox'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>其中 this.state 是用Vuex插件定义的全局状态变量，其本身是 src/store/index.js文件中定义的一个对象，在其中我们定义了各种地图的配置选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    <span class="comment">// 底图数据</span></span><br><span class="line">    layerItems: &#123;</span><br><span class="line">      <span class="string">'tdt_n'</span>: <span class="string">'TianDiTu.Normal.Map'</span>,</span><br><span class="line">      <span class="string">'tdt_n_a'</span>: <span class="string">'TianDiTu.Normal.Annotion'</span>,</span><br><span class="line">      <span class="string">'tdt_s'</span>: <span class="string">'TianDiTu.Satellite.Map'</span>,</span><br><span class="line">      <span class="string">'tdt_s_a'</span>: <span class="string">'Satellite.Annotion'</span>,</span><br><span class="line">      <span class="string">'gd_n_a'</span>: <span class="string">'GaoDe.Normal.Map'</span>,</span><br><span class="line">      <span class="string">'gd_s'</span>: <span class="string">'GaoDe.Satellite.Map'</span>,</span><br><span class="line">      <span class="string">'gd_s_a'</span>: <span class="string">'GaoDe.Satellite.Annotion'</span>,</span><br><span class="line">      <span class="string">'glg_n'</span>: <span class="string">'Google.Normal.Map'</span>,</span><br><span class="line">      <span class="string">'glg_s'</span>: <span class="string">'Google.Satellite.Map'</span>,</span><br><span class="line">      <span class="string">'geo_n'</span>: <span class="string">'Geoq.Normal.Map'</span>,</span><br><span class="line">      <span class="string">'geo_n_p'</span>: <span class="string">'Geoq.Normal.PurplishBlue'</span>,</span><br><span class="line">      <span class="string">'geo_n_g'</span>: <span class="string">'Geoq.Normal.Gray'</span>,</span><br><span class="line">      <span class="string">'geo_n_w'</span>: <span class="string">'Geoq.Normal.Warm'</span>,</span><br><span class="line">      <span class="string">'geo_n_h'</span>: <span class="string">'Geoq.Normal.Hydro'</span>,</span><br><span class="line">      <span class="string">'osm'</span>: <span class="string">'OSM.Normal.Map'</span>,</span><br><span class="line">      <span class="string">'box_d'</span>: <span class="string">'mapbox.dark'</span>,</span><br><span class="line">      <span class="string">'box_l'</span>: <span class="string">'mapbox.light'</span>,</span><br><span class="line">      <span class="string">'box'</span>: <span class="string">'mapbox.streets'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//地图配置</span></span><br><span class="line">    mapconfig: &#123;</span><br><span class="line">      zoom: <span class="number">15</span>,</span><br><span class="line">      center: [<span class="number">30.541093</span>, <span class="number">114.360734</span>],</span><br><span class="line">      minZoom: <span class="number">2</span>,</span><br><span class="line">      maxZoom: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setMap(state, key, value) &#123;</span><br><span class="line">      state.mapconfig[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>然后基于Leftlet的图层切换与返回指定位置功能就实现啦，预览：<a href="http://geoai.sunyunzeng.com/#/home" target="_blank" rel="noopener">http://geoai.sunyunzeng.com/#/home</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;自己做了一
      
    
    </summary>
    
      <category term="教程" scheme="http://sunyunzeng.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Vue" scheme="http://sunyunzeng.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue + Express + MySQL驾驶行为分析全栈项目(三): 前端设计</title>
    <link href="http://sunyunzeng.com/Vue-Express-MySQL%E9%A9%BE%E9%A9%B6%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE-%E4%B8%89-%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/"/>
    <id>http://sunyunzeng.com/Vue-Express-MySQL驾驶行为分析全栈项目-三-前端设计/</id>
    <published>2019-12-12T05:51:15.000Z</published>
    <updated>2020-01-11T13:36:40.818Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>自己做了一点点的小尝试：基于前馈神经网络 LSTM 的个体出行目的地预测模型，基于个体历史出行数据，模型可以实现出行目的地的实时动态预测功能。</p><p>模型其实具有实际应用功能，为了对其应用场景进行探索，拟开发一个全栈的项目，在Web客户端实现用户出行的动态预测效果，同时能够提供数据可视分析等功能。</p><p><strong><a href="https://github.com/SUNYunZeng/AIforDriving" target="_blank" rel="noopener">项目地址</a></strong></p><p><strong><a href="http://geoai.sunyunzeng.com/" target="_blank" rel="noopener">可视化效果</a></strong></p><h1 id="前端结构设计"><a href="#前端结构设计" class="headerlink" title="前端结构设计"></a>前端结构设计</h1><p>下图是整个项目的结构，也就是采用Vue-cli脚手架搭建的前端项目结构</p><img src="/Vue-Express-MySQL驾驶行为分析全栈项目-三-前端设计/structure.png"><blockquote><p><strong>buile</strong> 文件夹存放项目构建脚本。<br><strong>config</strong> 文件夹存放项目的配置信息，包括webpack配置及端口转发等。<br><strong>dist/docs</strong> 文件夹存放的是项目构建后的内容，即编译出的项目代码。<br><strong>node_modules</strong> 这个目录存放的是项目的所有依赖，即 npm install 命令下载下来的文件。<br><strong>server</strong> 文件夹存放的是服务器相关代码与数据。<br><strong>src</strong> 存放前端项目的源码。<br><strong>static</strong> 存放项目的静态资源。<br><strong>index.html</strong> 项目的入口页，也是唯一的HTML页面。<br><strong>package.json</strong> 定义了项目的所有依赖，包括开发时依赖和发布时依赖。</p></blockquote><p>其中前端开发的大多工作是在 <strong>src</strong> 文件夹下进行的，它的目录结构如下：</p><img src="/Vue-Express-MySQL驾驶行为分析全栈项目-三-前端设计/src.png"><blockquote><p><strong>assets</strong> 文件夹存放资产文件。<br><strong>components</strong> 文件夹存放项目公共的组件(.vue文件)。<br><strong>lib</strong> 文件夹存放的是第三方库暴露出来的接口。<br><strong>router</strong> 存放前端界面的路由逻辑js文件。<br><strong>store</strong> 文件夹存放的是全局共享的变量。<br><strong>utils</strong> 存放辅助函数脚本。<br><strong>view</strong> 存放项目各独立界面(.vue文件)。<br><strong>App.vue</strong> 一个vue组件，是第一个vue组件。<br><strong>main.js</strong> 定义了项目启动的入口。<br><strong>permission.js</strong> 界面初始化工作，包括动态界面的加载。</p></blockquote><h1 id="界面模版"><a href="#界面模版" class="headerlink" title="界面模版"></a>界面模版</h1><p>前端界面模版是基于 <a href="https://github.com/PanJiaChen/vue-admin-template" target="_blank" rel="noopener">vue-admin-template</a>修改的，去除了登录功能，精简了界面逻辑。</p><p>界面模版最大的特点可以实现菜单栏的个性定制。</p><p>首先在 src/components/Index.vue文件夹内，定义动态菜单栏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"index-vue"</span>&gt;</span><br><span class="line">    &lt;!-- 侧边栏 --&gt;</span><br><span class="line">    &lt;aside :<span class="class"><span class="keyword">class</span></span>=<span class="string">"asideClassName"</span>&gt;</span><br><span class="line">      &lt;!-- logo --&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"logo-c pointer"</span> @click=<span class="string">"isShrinkAside"</span> title=<span class="string">"收缩/展开"</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">"../assets/imgs/logo.png"</span> alt=<span class="string">"logo"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"logo"</span>&gt;</span><br><span class="line">        &lt;span v-show=<span class="string">"isShowAsideTitle"</span>&gt;驾驶分析系统&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;!-- 菜单栏 --&gt;</span><br><span class="line">      &lt;Menu <span class="class"><span class="keyword">class</span></span>=<span class="string">"menu"</span> ref=<span class="string">"asideMenu"</span> theme=<span class="string">"dark"</span> width=<span class="string">"100%"</span> @on-select=<span class="string">"gotoPage"</span></span><br><span class="line">            accordion :open-names=<span class="string">"openMenus"</span> :active-name=<span class="string">"currentPage"</span> @on-open-change=<span class="string">"menuChange"</span>&gt;</span><br><span class="line">        &lt;!-- 动态菜单 --&gt;</span><br><span class="line">        &lt;div v-<span class="keyword">for</span>=<span class="string">"(item, index) in menuItems"</span> :key=<span class="string">"index"</span>&gt;</span><br><span class="line">          &lt;Submenu v-<span class="keyword">if</span>=<span class="string">"item.children"</span> :name=<span class="string">"index"</span>&gt;</span><br><span class="line">            &lt;template slot=<span class="string">"title"</span>&gt;</span><br><span class="line">              &lt;Icon :size=<span class="string">"item.size"</span> :type=<span class="string">"item.type"</span>/&gt;</span><br><span class="line">              &lt;span v-show=<span class="string">"isShowAsideTitle"</span>&gt;&#123;&#123;item.text&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>template&gt;</span><br><span class="line">            &lt;div v-<span class="keyword">for</span>=<span class="string">"(subItem, i) in item.children"</span> :key=<span class="string">"index + i"</span>&gt;</span><br><span class="line">              &lt;Submenu v-<span class="keyword">if</span>=<span class="string">"subItem.children"</span> :name=<span class="string">"index + '-' + i"</span>&gt;</span><br><span class="line">                &lt;template slot=<span class="string">"title"</span>&gt;</span><br><span class="line">                  &lt;Icon :size=<span class="string">"subItem.size"</span> :type=<span class="string">"subItem.type"</span>/&gt;</span><br><span class="line">                  &lt;span v-show=<span class="string">"isShowAsideTitle"</span>&gt;&#123;&#123;subItem.text&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>template&gt;</span><br><span class="line">                &lt;MenuItem <span class="class"><span class="keyword">class</span></span>=<span class="string">"menu-level-3"</span> v-<span class="keyword">for</span>=<span class="string">"(threeItem, k) in subItem.children"</span></span><br><span class="line">                          v-<span class="keyword">if</span>=<span class="string">"!threeItem.hidden"</span> :name=<span class="string">"threeItem.name"</span> :key=<span class="string">"index + i + k"</span>&gt;</span><br><span class="line">                  &lt;Icon :size=<span class="string">"threeItem.size"</span> :type=<span class="string">"threeItem.type"</span>/&gt;</span><br><span class="line">                  &lt;span v-show=<span class="string">"isShowAsideTitle"</span>&gt;&#123;&#123;threeItem.text&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>MenuItem&gt;</span><br><span class="line">              &lt;<span class="regexp">/Submenu&gt;</span></span><br><span class="line"><span class="regexp">              &lt;MenuItem v-else-if="!subItem.hidden" :name="subItem.name"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Icon :size="subItem.size" :type="subItem.type"/</span>&gt;</span><br><span class="line">                &lt;span v-show=<span class="string">"isShowAsideTitle"</span>&gt;&#123;&#123;subItem.text&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>MenuItem&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>Submenu&gt;</span><br><span class="line">          &lt;MenuItem v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"!item.hidden"</span> :name=<span class="string">"item.name"</span>&gt;</span><br><span class="line">            &lt;Icon :size=<span class="string">"item.size"</span> :type=<span class="string">"item.type"</span>/&gt;</span><br><span class="line">            &lt;span v-show=<span class="string">"isShowAsideTitle"</span>&gt;&#123;&#123;item.text&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>MenuItem&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Menu&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    name: 'index',</span></span><br><span class="line"><span class="regexp">    data () &#123;</span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 用于储存页面路径</span></span><br><span class="line"><span class="regexp">        paths: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 当前显示页面</span></span><br><span class="line"><span class="regexp">        currentPage: '',</span></span><br><span class="line"><span class="regexp">        openMenus: [], /</span><span class="regexp">/ 要打开的菜单名字 name属性</span></span><br><span class="line"><span class="regexp">        menuCache: [], /</span><span class="regexp">/ 缓存已经打开的菜单</span></span><br><span class="line"><span class="regexp">        showLoading: false, /</span><span class="regexp">/ 是否显示loading</span></span><br><span class="line"><span class="regexp">        isShowRouter: true,</span></span><br><span class="line"><span class="regexp">        isShowAsideTitle: true, /</span><span class="regexp">/ 是否展示侧边栏内容</span></span><br><span class="line"><span class="regexp">        main: null, /</span><span class="regexp">/ 页面主要内容区域</span></span><br><span class="line"><span class="regexp">        asideClassName: 'aside-big', /</span><span class="regexp">/ 控制侧边栏宽度变化</span></span><br><span class="line"><span class="regexp">        asideArrowIcons: [], /</span><span class="regexp">/ 缓存侧边栏箭头图标 收缩时用</span></span><br><span class="line"><span class="regexp">      &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    created () &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 已经为ajax请求设置了loading 请求前自动调用 请求完成自动结束</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 添加请求拦截器</span></span><br><span class="line"><span class="regexp">      this.$axios.interceptors.request.use(config =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.showLoading = false;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 在发送请求之前做些什么</span></span><br><span class="line"><span class="regexp">        return config;</span></span><br><span class="line"><span class="regexp">      &#125;, error =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.showLoading = false;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 对请求错误做些什么</span></span><br><span class="line"><span class="regexp">        return Promise.reject(error);</span></span><br><span class="line"><span class="regexp">      &#125;);</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 添加响应拦截器</span></span><br><span class="line"><span class="regexp">      this.$axios.interceptors.response.use(response =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 可以在这里对返回的数据进行错误处理 如果返回的 code 不对 直接报错或退出登陆</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 就可以省去在业务代码里重复判断</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 例子</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ if (res.code != 0) &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/     this.$Message.error(res.msg)</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/     return Promise.reject()</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp">        this.showLoading = false;</span></span><br><span class="line"><span class="regexp">        const res = response.data;</span></span><br><span class="line"><span class="regexp">        return res;</span></span><br><span class="line"><span class="regexp">      &#125;, error =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.showLoading = false;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 对响应错误做点什么</span></span><br><span class="line"><span class="regexp">        return Promise.reject(error);</span></span><br><span class="line"><span class="regexp">      &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    mounted () &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 第一个标签</span></span><br><span class="line"><span class="regexp">      const name = this.$route.name;</span></span><br><span class="line"><span class="regexp">      this.currentPage = name;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 根据路由打开对应的菜单栏</span></span><br><span class="line"><span class="regexp">      this.openMenus = this.getMenus(name);</span></span><br><span class="line"><span class="regexp">      this.$nextTick(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.$refs.asideMenu.updateOpened();</span></span><br><span class="line"><span class="regexp">      &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      this.main = document.querySelector('.sec-right');</span></span><br><span class="line"><span class="regexp">      this.asideArrowIcons = document.querySelectorAll('aside .ivu-icon-ios-arrow-down');</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 监听窗口大小 自动收缩侧边栏</span></span><br><span class="line"><span class="regexp">      this.monitorWindowSize();</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    watch: &#123;</span></span><br><span class="line"><span class="regexp">      $route (to) &#123;</span></span><br><span class="line"><span class="regexp">        const name = to.name;</span></span><br><span class="line"><span class="regexp">        this.currentPage = name;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    computed: &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 菜单栏</span></span><br><span class="line"><span class="regexp">      menuItems () &#123;</span></span><br><span class="line"><span class="regexp">        return this.$store.state.menuItems;</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 由于iView的导航菜单比较坑 只能设定一个name参数</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 所以需要在这定义组件名称和标签栏标题的映射表 有多少个页面就有多少个映射条数</span></span><br><span class="line"><span class="regexp">      nameToTitle () &#123;</span></span><br><span class="line"><span class="regexp">        const obj = &#123;&#125;;</span></span><br><span class="line"><span class="regexp">        this.menuItems.forEach(e =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          this.processNameToTitle(obj, e);</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        return obj;</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">      getMenus (name) &#123;</span></span><br><span class="line"><span class="regexp">        let menus;</span></span><br><span class="line"><span class="regexp">        const tagTitle = this.nameToTitle[name];</span></span><br><span class="line"><span class="regexp">        for (let i = 0, l = this.menuItems.length; i &lt; l; i++) &#123;</span></span><br><span class="line"><span class="regexp">          const item = this.menuItems[i];</span></span><br><span class="line"><span class="regexp">          menus = [];</span></span><br><span class="line"><span class="regexp">          menus[0] = i;</span></span><br><span class="line"><span class="regexp">          if (item.text == tagTitle) &#123;</span></span><br><span class="line"><span class="regexp">            return menus;</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          if (item.children) &#123;</span></span><br><span class="line"><span class="regexp">            for (let j = 0, ll = item.children.length; j &lt; ll; j++) &#123;</span></span><br><span class="line"><span class="regexp">              const child = item.children[j];</span></span><br><span class="line"><span class="regexp">              menus[1] = i + '-' + j;</span></span><br><span class="line"><span class="regexp">              menus.length = 2;</span></span><br><span class="line"><span class="regexp">              if (child.text == tagTitle) &#123;</span></span><br><span class="line"><span class="regexp">                return menus;</span></span><br><span class="line"><span class="regexp">              &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">              if (child.children) &#123;</span></span><br><span class="line"><span class="regexp">                for (let k = 0, lll = child.children.length; k &lt; lll; k++) &#123;</span></span><br><span class="line"><span class="regexp">                  const grandson = child.children[k];</span></span><br><span class="line"><span class="regexp">                  menus[2] = i + '-' + j + '-' + k;</span></span><br><span class="line"><span class="regexp">                  if (grandson.text == tagTitle) &#123;</span></span><br><span class="line"><span class="regexp">                    return menus;</span></span><br><span class="line"><span class="regexp">                  &#125;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">              &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      monitorWindowSize () &#123;</span></span><br><span class="line"><span class="regexp">        let w = document.documentElement.clientWidth || document.body.clientWidth;</span></span><br><span class="line"><span class="regexp">        if (w &lt; 1300) &#123;</span></span><br><span class="line"><span class="regexp">          this.shrinkAside();</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        window.onresize = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 可视窗口宽度太小 自动收缩侧边栏</span></span><br><span class="line"><span class="regexp">          if (w &lt; 1300 &amp;&amp; this.isShowAsideTitle</span></span><br><span class="line"><span class="regexp">            &amp;&amp; w &gt; (document.documentElement.clientWidth || document.body.clientWidth)) &#123;</span></span><br><span class="line"><span class="regexp">            this.shrinkAside();</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          w = document.documentElement.clientWidth || document.body.clientWidth;</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 判断当前标签页是否激活状态</span></span><br><span class="line"><span class="regexp">      isActive (name) &#123;</span></span><br><span class="line"><span class="regexp">        return this.$route.name === name;</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 判断</span></span><br><span class="line"><span class="regexp">      isShrinkAside () &#123;</span></span><br><span class="line"><span class="regexp">        this.isShowAsideTitle ? this.shrinkAside() : this.expandAside();</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 收缩</span></span><br><span class="line"><span class="regexp">      shrinkAside () &#123;</span></span><br><span class="line"><span class="regexp">        this.asideArrowIcons.forEach(e =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          e.style.display = 'none';</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        this.isShowAsideTitle = false;</span></span><br><span class="line"><span class="regexp">        this.openMenus = [];</span></span><br><span class="line"><span class="regexp">        this.$nextTick(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          this.$refs.asideMenu.updateOpened();</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          this.asideClassName = '';</span></span><br><span class="line"><span class="regexp">          this.main.style.width = 'calc(100% - 80px)';</span></span><br><span class="line"><span class="regexp">        &#125;, 0);</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 展开</span></span><br><span class="line"><span class="regexp">      expandAside () &#123;</span></span><br><span class="line"><span class="regexp">        setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          this.isShowAsideTitle = true;</span></span><br><span class="line"><span class="regexp">          this.asideArrowIcons.forEach(e =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            e.style.display = 'block';</span></span><br><span class="line"><span class="regexp">          &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          this.openMenus = this.menuCache;</span></span><br><span class="line"><span class="regexp">          this.$nextTick(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            this.$refs.asideMenu.updateOpened();</span></span><br><span class="line"><span class="regexp">          &#125;);</span></span><br><span class="line"><span class="regexp">        &#125;, 200);</span></span><br><span class="line"><span class="regexp">        this.asideClassName = 'aside-big';</span></span><br><span class="line"><span class="regexp">        this.main.style.width = 'calc(100% - 220px)';</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 菜单栏改变事件</span></span><br><span class="line"><span class="regexp">      menuChange (data) &#123;</span></span><br><span class="line"><span class="regexp">        this.menuCache = data;</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      processNameToTitle (obj, data, text) &#123;</span></span><br><span class="line"><span class="regexp">        if (data.name) &#123;</span></span><br><span class="line"><span class="regexp">          obj[data.name] = data.text;</span></span><br><span class="line"><span class="regexp">          this.paths[data.name] = text ? `$&#123;text&#125; /</span> $&#123;data.text&#125;<span class="string">` : data.text;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (data.children) &#123;</span></span><br><span class="line"><span class="string">          data.children.forEach(e =&gt; &#123;</span></span><br><span class="line"><span class="string">            this.processNameToTitle(obj, e, text ? `</span>$&#123;text&#125; / $&#123;data.text&#125;<span class="string">` : data.text);</span></span><br><span class="line"><span class="string">          &#125;);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>任务栏是根据 this.$store.state.menuItems 定义的内容循环更新，包括子任务栏，其定义在src/store/index.js文件内，需利用<strong>Vuex</strong>状态管理插件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    <span class="comment">// 左侧菜单栏数据</span></span><br><span class="line">    menuItems: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'home'</span>, <span class="comment">// 要跳转的路由名称 不是路径</span></span><br><span class="line">        size: <span class="number">22</span>, <span class="comment">// icon大小</span></span><br><span class="line">        type: <span class="string">'md-home'</span>, <span class="comment">// icon类型</span></span><br><span class="line">        text: <span class="string">'主页'</span>, <span class="comment">// 文本内容</span></span><br><span class="line">      &#125;</span><br><span class="line">      &#123;</span><br><span class="line">        text: <span class="string">'数据视图'</span>,</span><br><span class="line">        type: <span class="string">'md-globe'</span>,</span><br><span class="line">        size: <span class="number">22</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            text: <span class="string">'可视化'</span>,</span><br><span class="line">            type: <span class="string">'ios-eye'</span>,</span><br><span class="line">            size: <span class="number">20</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                type: <span class="string">'logo-steam'</span>,</span><br><span class="line">                name: <span class="string">'trajectory'</span>,</span><br><span class="line">                text: <span class="string">'轨迹'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setMenus (state, items) &#123;</span><br><span class="line">      state.menuItems = [...items];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>然后在src/router/index.js文件中定义每个组件的路由规则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> commonRouters = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    redirect: <span class="string">'home'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 需要动态定制的任务栏，包括子任务栏</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRouters = &#123;</span><br><span class="line">  <span class="string">'home'</span>: &#123;</span><br><span class="line">    path: <span class="string">'home'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Home.vue'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'trajectory'</span>: &#123;</span><br><span class="line">    path: <span class="string">'trajectory'</span>,</span><br><span class="line">    name: <span class="string">'trajectory'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Trajectory.vue'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createRouter = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: commonRouters</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resetRouter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newRouter = createRouter();</span><br><span class="line">  router.matcher = newRouter.matcher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>然后在 src/views 文件夹下定义对应路口的界面vue组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    name: 'home'</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Trajectory.vue</span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    ...</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'home'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>之后，在src/permission.js文件中，定义界面初始化逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123;menusToRouters&#125; <span class="keyword">from</span> <span class="string">'@/utils'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;LoadingBar&#125; <span class="keyword">from</span> <span class="string">'iview'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hasMenus = <span class="literal">false</span>;</span><br><span class="line">router.beforeEach(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next)=&gt;&#123;</span><br><span class="line">  LoadingBar.start();</span><br><span class="line">  <span class="keyword">if</span>(hasMenus)&#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> routers = menusToRouters(store.state.menuItems);</span><br><span class="line">      router.addRoutes(routers);</span><br><span class="line">      hasMenus = <span class="literal">true</span>;</span><br><span class="line">      next(&#123;<span class="attr">path</span>: to.path || <span class="string">'/'</span>&#125;);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  LoadingBar.finish()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中 menusToRouters 方法是将定义的任务栏转化为对应的router对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;asyncRouters&#125; <span class="keyword">from</span> <span class="string">'@/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">menusToRouters</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> children = [];</span><br><span class="line"></span><br><span class="line">  res.push(&#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/Index.vue'</span>),</span><br><span class="line">    children,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    generateRouters(children, item);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  children.push(&#123;</span><br><span class="line">    path: <span class="string">'error'</span>,</span><br><span class="line">    name: <span class="string">'error'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/Error.vue'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRouters</span> (<span class="params">children, item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item.name) &#123;</span><br><span class="line">    children.push(asyncRouters[item.name]);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.children) &#123;</span><br><span class="line">    item.children.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      generateRouters(children, e);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在入口文件 src/main.js 文件中导入permission.js文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'@/App'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span>;</span><br><span class="line"><span class="keyword">import</span> iView <span class="keyword">from</span> <span class="string">'iview'</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'iview/dist/styles/iview.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/permission'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line">Vue.prototype.$axios = axios;</span><br><span class="line">Vue.use(iView);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App) <span class="comment">// 相当于 components: &#123; App &#125;  vue1.0的写法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>初始化的菜单栏就定义完成了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Mar 13 2020 21:10:51 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;自己做了一
      
    
    </summary>
    
      <category term="教程" scheme="http://sunyunzeng.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Vue" scheme="http://sunyunzeng.com/tags/Vue/"/>
    
  </entry>
  
</feed>
